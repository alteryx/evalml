<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="2" name="pytest" skipped="36" tests="1173" time="186.175"><testcase classname="" file="evalml/tests/component_tests/test_text_featurizer.py" name="evalml.tests.component_tests.test_text_featurizer" time="0.000"><skipped message="collection skipped">(&apos;/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/component_tests/test_text_featurizer.py&apos;, 9, &apos;Skipped: Skipping test because featuretools not installed&apos;)</skipped></testcase><testcase classname="evalml.tests.test_all_test_dirs_included" file="evalml/tests/test_all_test_dirs_included.py" line="5" name="test_all_test_dirs_included" time="0.036"><failure message="assert 17 == 16
  -17
  +16">def test_all_test_dirs_included():
        all_modules = find_packages()
        test_dir = os.path.dirname(__file__)
        all_test_dirs_with_init_files = [module for module in all_modules if &quot;evalml.tests&quot; in module]
        all_test_dirs = [dirname for dirname, _, files in os.walk(test_dir) if &quot;__pycache__&quot; not in dirname and &quot;test&quot; in os.path.split(dirname)[1]]
&gt;       assert len(all_test_dirs) == len(all_test_dirs_with_init_files)
E       assert 17 == 16
E         -17
E         +16

evalml/tests/test_all_test_dirs_included.py:11: AssertionError</failure></testcase><testcase classname="evalml.data_checks.highly_null_data_check" file="evalml/data_checks/highly_null_data_check.py" line="22" name="evalml.data_checks.highly_null_data_check.HighlyNullDataCheck.validate" time="0.023"></testcase><testcase classname="evalml.data_checks.invalid_targets_data_check" file="evalml/data_checks/invalid_targets_data_check.py" line="15" name="evalml.data_checks.invalid_targets_data_check.InvalidTargetDataCheck.validate" time="0.023"></testcase><testcase classname="evalml.data_checks.outliers_data_check" file="evalml/data_checks/outliers_data_check.py" line="23" name="evalml.data_checks.outliers_data_check.OutliersDataCheck.validate" time="0.283"></testcase><testcase classname="evalml.data_checks.label_leakage_data_check" file="evalml/data_checks/label_leakage_data_check.py" line="25" name="evalml.data_checks.label_leakage_data_check.LabelLeakageDataCheck.validate" time="0.030"></testcase><testcase classname="evalml.model_understanding.prediction_explanations._algorithms" file="evalml/model_understanding/prediction_explanations/_algorithms.py" line="113" name="evalml.model_understanding.prediction_explanations._algorithms._normalize_values_dict" time="0.021"></testcase><testcase classname="evalml.data_checks.id_columns_data_check" file="evalml/data_checks/id_columns_data_check.py" line="20" name="evalml.data_checks.id_columns_data_check.IDColumnsDataCheck.validate" time="0.038"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="38" name="test_search_results[Regression]" time="1.961"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: random_forest, catboost, linear_model, extra_trees, xgboost

(1/2) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/2) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910

Search finished after 00:00            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="147" name="test_pipeline_fit_raises" time="1.233"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, lightgbm, xgboost

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
			Fold 0: Encountered an error.
			Fold 0: All scores will be replaced with nan.
			Fold 0: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 1: Encountered an error.
			Fold 1: All scores will be replaced with nan.
			Fold 1: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 2: Encountered an error.
			Fold 2: All scores will be replaced with nan.
			Fold 2: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
	Finished cross validation - mean Log Loss Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="38" name="test_search_results[Binary Classification]" time="2.241"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 2 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.389

Search finished after 00:01            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.388713
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="87" name="test_pipeline_limits[Binary Classification]" time="3.890"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Will stop searching for new pipelines after 1 seconds.

Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

Mode Baseline Binary Classification P... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:01            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Will stop searching for new pipelines after 1 seconds.

Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Will stop searching for new pipelines after 0 seconds.

Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

Mode Baseline Binary Classification P... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="87" name="test_pipeline_limits[Multiclass Classification]" time="3.873"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/1) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Will stop searching for new pipelines after 1 seconds.

Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

Mode Baseline Multiclass Classificati... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Extra Trees Classifier w/ Imputer        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
CatBoost Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
XGBoost Classifier w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Random Forest Classifier w/ Imputer      Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
Logistic Regression Classifier w/ Imp... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:01            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Will stop searching for new pipelines after 1 seconds.

Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Will stop searching for new pipelines after 0 seconds.

Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

Mode Baseline Multiclass Classificati... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="38" name="test_search_results[Multiclass Classification]" time="4.032"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 2 pipelines. 
Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/2) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 22.451
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.456

Search finished after 00:02            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.455546
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="169" name="test_pipeline_score_raises" time="1.212"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
			Fold 0: Encountered an error.
			Fold 0: All scores will be replaced with nan.
			Fold 0: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 1: Encountered an error.
			Fold 1: All scores will be replaced with nan.
			Fold 1: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 2: Encountered an error.
			Fold 2: All scores will be replaced with nan.
			Fold 2: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
	Finished cross validation - mean Log Loss Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="87" name="test_pipeline_limits[Regression]" time="3.422"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 1 pipelines. 
Allowed model families: linear_model, random_forest, xgboost, catboost, extra_trees

(1/1) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Will stop searching for new pipelines after 1 seconds.

Allowed model families: linear_model, random_forest, xgboost, catboost, extra_trees

Mean Baseline Regression Pipeline        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
CatBoost Regressor w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Random Forest Regressor w/ Imputer       Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
CatBoost Regressor w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
CatBoost Regressor w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
CatBoost Regressor w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
CatBoost Regressor w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
CatBoost Regressor w/ Imputer            Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Random Forest Regressor w/ Imputer       Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Random Forest Regressor w/ Imputer       Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Random Forest Regressor w/ Imputer       Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Random Forest Regressor w/ Imputer       Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Random Forest Regressor w/ Imputer       Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:01            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Will stop searching for new pipelines after 1 seconds.

Allowed model families: linear_model, random_forest, xgboost, catboost, extra_trees

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) CatBoost Regressor w/ Imputer            Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, random_forest, xgboost, catboost, extra_trees

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) CatBoost Regressor w/ Imputer            Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Will stop searching for new pipelines after 0 seconds.

Allowed model families: linear_model, random_forest, xgboost, catboost, extra_trees

Mean Baseline Regression Pipeline        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="341" name="test_automl_data_checks_raises_error[data_checks1]" time="0.004"><system-out>error one
warning one
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="341" name="test_automl_data_checks_raises_error[data_checks0]" time="0.004"><system-out>error one
warning one
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="509" name="test_automl_serialization_protocol" time="0.004"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="494" name="test_automl_serialization" time="3.533"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, lightgbm, xgboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.389
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.437
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:02
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.612
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:02
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.535

Search finished after 00:02            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.388713
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="609" name="test_init_objective" time="0.002"><system-out>Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="714" name="test_has_searched" time="0.368"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[int32-Multiclass Classification]" time="6.882"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:05
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:06            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="188" name="test_objective_score_raises" time="0.427"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, random_forest, catboost, linear_model, extra_trees, xgboost

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
			Fold 0: Encountered an error scoring the following objectives: AUC.
			Fold 0: The scores for these objectives will be replaced with nan.
			Fold 0: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 1: Encountered an error scoring the following objectives: AUC.
			Fold 1: The scores for these objectives will be replaced with nan.
			Fold 1: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 2: Encountered an error scoring the following objectives: AUC.
			Fold 2: The scores for these objectives will be replaced with nan.
			Fold 2: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
	Finished cross validation - mean Log Loss Binary: 17.618

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 17.618402
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="208" name="test_rankings" time="13.978"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: random_forest

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/3) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.386
(3/3) Random Forest Classifier w/ Imputer      Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.393

Search finished after 00:07            
Best pipeline: Random Forest Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.385626
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: random_forest

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/3) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.844
(3/3) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838

Search finished after 00:06            
Best pipeline: Random Forest Regressor w/ Imputer
Best pipeline R2: 0.843810
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="361" name="test_automl_bad_data_check_parameter_type" time="0.006"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="524" name="test_invalid_data_splitter" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="616" name="test_checks_at_search_time" time="0.005"><system-out>Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="727" name="test_no_search" time="0.013"><system-out>Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[int64-Binary Classification]" time="8.420"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, random_forest, catboost, linear_model, extra_trees, xgboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:07
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:08            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="319" name="test_automl_default_data_checks" time="0.328"><system-out>default data check warning
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: linear_model, random_forest, catboost, xgboost, lightgbm, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="296" name="test_automl_empty_data_checks" time="0.732"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(2/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(3/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="291" name="test_automl_data_check_results_is_none_before_search" time="0.001"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="438" name="test_automl_tuner_exception" time="5.919"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 10 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, xgboost

(1/10) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.018
(2/10) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.632
(3/10) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.541
(4/10) CatBoost Regressor w/ Imputer            Elapsed:00:04
	Starting cross validation
	Finished cross validation - mean R2: 0.144
(5/10) Random Forest Regressor w/ Imputer       Elapsed:00:04
	Starting cross validation
	Finished cross validation - mean R2: 0.660
(6/10) Linear Regressor w/ Imputer + Standar... Elapsed:00:05
	Starting cross validation
	Finished cross validation - mean R2: 0.283
(7/10) Elastic Net Regressor w/ Imputer + St... Elapsed:00:05
	Starting cross validation
	Finished cross validation - mean R2: 0.233
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="469" name="test_automl_allowed_pipelines_algorithm" time="0.110"><system-out>Generating pipelines to search over...
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="223" name="test_automl_str_search" time="0.412"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Will stop searching for new pipelines after 100 seconds.

Allowed model families: random_forest, linear_model

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000


2 iterations without improvement. Stopping search early...

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="596" name="test_main_objective_problem_type_mismatch" time="0.001"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="675" name="test_add_to_rankings_duplicate" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: none

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.123

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 0.123400
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.123
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[int16-Multiclass Classification]" time="8.511"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, random_forest, catboost, xgboost, lightgbm, extra_trees

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:07
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:08            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="415" name="test_automl_feature_selection" time="0.381"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 2 pipelines. 
Allowed model families: linear_model

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/2) Mock Feature Selection Pipeline          Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="451" name="test_automl_algorithm" time="0.364"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
AutoML Algorithm out of recommendations, ending

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="601" name="test_init_problem_type_error" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="691" name="test_add_to_rankings_trained" time="0.228"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: none

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.123
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.123
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="554" name="test_large_dataset_multiclass" time="0.460"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 1 pipelines. 
Will stop searching for new pipelines after 1 seconds.

Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/1) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.234

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.234000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="588" name="test_allowed_pipelines_with_incorrect_problem_type" time="0.004"><system-out>Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="663" name="test_add_to_rankings_no_search" time="0.005"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[int16-Binary Classification]" time="9.887"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[int32-Binary Classification]" time="9.687"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, lightgbm, xgboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="633" name="test_default_objective" time="0.004"><system-out>Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="774" name="test_describe_pipeline" time="0.386"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
************************************************
* Mode Baseline Binary Classification Pipeline *
************************************************

Problem Type: Binary Classification
Model Family: Baseline

Pipeline Steps
==============
1. Baseline Classifier
	 * strategy : mode

Training
========
Training for Binary Classification problems.
Total training time (including CV): 0.0 seconds

Cross Validation
----------------
             Log Loss Binary # Training # Testing
0                      1.000     66.000    34.000
1                      1.000     67.000    33.000
2                      1.000     67.000    33.000
mean                   1.000          -         -
std                    0.000          -         -
coef of var            0.000          -         -
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[float16-Binary Classification]" time="9.812"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[float64-Multiclass Classification]" time="8.824"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:07
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:08            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="571" name="test_large_dataset_regression" time="0.438"><system-out>Column &apos;col_0&apos; is 95.0% or more correlated with the target
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 1 pipelines. 
Will stop searching for new pipelines after 1 seconds.

Allowed model families: linear_model, catboost, extra_trees, random_forest, xgboost

(1/1) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.234

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.234000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="645" name="test_add_to_rankings" time="0.212"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: none

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.123
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="804" name="test_results_getter" time="0.342"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[float16-Multiclass Classification]" time="8.989"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:07
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:08            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[bool-Binary Classification]" time="10.040"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, random_forest, catboost, linear_model, extra_trees, xgboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[float32-Multiclass Classification]" time="8.892"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, random_forest, catboost, xgboost, lightgbm, extra_trees

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:07
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:08            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[float64-Binary Classification]" time="9.838"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, lightgbm, xgboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[float32-Binary Classification]" time="9.872"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.869
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[object-Binary Classification]" time="9.749"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.868
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:08
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:09            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="378" name="test_automl_str_no_param_search" time="0.005"><system-out>Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="530" name="test_large_dataset_binary" time="0.619"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Fraud Cost. 
Lower score is better.

Searching up to 1 pipelines. 
Will stop searching for new pipelines after 1 seconds.

Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Fraud Cost: 1.234

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Fraud Cost: 1.234000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="628" name="test_incompatible_additional_objectives" time="0.003"><system-out>Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="749" name="test_get_pipeline_invalid" time="0.744"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[1-user_input1-0]" time="0.287"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[int64-Multiclass Classification]" time="8.225"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:07
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:07            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[3-user_input9-2]" time="0.360"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="936" name="test_pipelines_in_batch_return_none" time="0.201"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple6-pipeline_scores6-0.1]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Accuracy Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple14-pipeline_scores14-0.1]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Accuracy Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple22-pipeline_scores22-0.1]" time="0.192"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Balanced Accuracy Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple30-pipeline_scores30-0.1]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Balanced Accuracy Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple38-pipeline_scores38-0.1]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple46-pipeline_scores46-0.1]" time="0.192"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline F1 Micro: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple54-pipeline_scores54-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline F1 Macro: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple62-pipeline_scores62-0.1]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline F1 Weighted: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple70-pipeline_scores70-0.1]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Precision: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[object-Multiclass Classification]" time="7.362"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:06
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:07            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple78-pipeline_scores78-0.1]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Precision Micro: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple86-pipeline_scores86-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Precision Macro: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple94-pipeline_scores94-0.1]" time="0.195"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Precision Weighted: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple102-pipeline_scores102-0.1]" time="0.195"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline AUC: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple110-pipeline_scores110-0.1]" time="0.288"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline AUC Micro: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[1-user_input2-5]" time="0.456"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, random_forest, catboost, linear_model, extra_trees, xgboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple118-pipeline_scores118-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline AUC Macro: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple126-pipeline_scores126-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline AUC Weighted: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[3-user_input10-5]" time="0.406"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, random_forest, catboost, linear_model, extra_trees, xgboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple134-pipeline_scores134-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple142-pipeline_scores142-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="949" name="test_error_during_train_test_split" time="0.362"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: lightgbm, random_forest, catboost, linear_model, extra_trees, xgboost

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
			Fold 0: Encountered an error.
			Fold 0: All scores will be replaced with nan.
			Fold 0: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 1: Encountered an error.
			Fold 1: All scores will be replaced with nan.
			Fold 1: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 2: Encountered an error.
			Fold 2: All scores will be replaced with nan.
			Fold 2: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
	Finished cross validation - mean Accuracy Binary: nan
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
			Fold 0: Encountered an error.
			Fold 0: All scores will be replaced with nan.
			Fold 0: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 1: Encountered an error.
			Fold 1: All scores will be replaced with nan.
			Fold 1: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
			Fold 2: Encountered an error.
			Fold 2: All scores will be replaced with nan.
			Fold 2: Please check /Users/bryan.chen/Documents/featurelabs/evalml/evalml_debug.log for the current hyperparameters and stack trace.
	Finished cross validation - mean Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Accuracy Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[category-Multiclass Classification]" time="6.738"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, random_forest, catboost, xgboost, lightgbm, extra_trees

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:05
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:06            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple150-pipeline_scores150-0.1]" time="0.192"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline MCC Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple158-pipeline_scores158-0.1]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline MCC Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple7-pipeline_scores7-nan]" time="0.206"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Accuracy Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple166-pipeline_scores166-0.1]" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline Root Mean Squared Error: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple15-pipeline_scores15-nan]" time="0.213"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Accuracy Multiclass: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple174-pipeline_scores174-0.1]" time="0.206"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple23-pipeline_scores23-nan]" time="0.210"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Balanced Accuracy Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple182-pipeline_scores182-0.1]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple31-pipeline_scores31-nan]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Balanced Accuracy Multiclass: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple190-pipeline_scores190-0.1]" time="0.203"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MSE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple39-pipeline_scores39-nan]" time="0.216"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple198-pipeline_scores198-0.1]" time="0.211"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MedianAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple47-pipeline_scores47-nan]" time="0.212"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline F1 Micro: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple205-pipeline_scores205-nan]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MaxError: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple55-pipeline_scores55-nan]" time="0.281"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline F1 Macro: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple206-pipeline_scores206-0.1]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MaxError: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple207-pipeline_scores207-nan]" time="0.195"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MaxError: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple63-pipeline_scores63-nan]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline F1 Weighted: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple208-pipeline_scores208-0.1]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline ExpVariance: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple71-pipeline_scores71-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Precision: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple209-pipeline_scores209-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline ExpVariance: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple79-pipeline_scores79-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Precision Micro: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple210-pipeline_scores210-0.1]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline ExpVariance: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple87-pipeline_scores87-nan]" time="0.203"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Precision Macro: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple211-pipeline_scores211-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline ExpVariance: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple95-pipeline_scores95-nan]" time="0.203"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Precision Weighted: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[1-user_input0-0]" time="0.300"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, lightgbm, xgboost

Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple212-pipeline_scores212-0.1]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline ExpVariance: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple103-pipeline_scores103-nan]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline AUC: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[category-Binary Classification]" time="6.895"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 12.868
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.122
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:05
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.146

Search finished after 00:06            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.122186
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[3-user_input8-2]" time="0.381"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, catboost, extra_trees, random_forest, lightgbm, xgboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple213-pipeline_scores213-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline ExpVariance: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple111-pipeline_scores111-nan]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline AUC Micro: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple214-pipeline_scores214-0.1]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline ExpVariance: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple119-pipeline_scores119-nan]" time="0.203"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline AUC Macro: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="916" name="test_pipelines_in_batch_return_nan" time="0.413"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
AutoML Algorithm out of recommendations, ending

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 17.618402
Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple215-pipeline_scores215-nan]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for ExpVariance. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean ExpVariance: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline ExpVariance: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[2-user_input4-1]" time="0.361"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple127-pipeline_scores127-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline AUC Weighted: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_algorithm" file="evalml/tests/automl_tests/test_automl_algorithm.py" line="5" name="test_automl_algorithm_init_base" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_algorithm" file="evalml/tests/automl_tests/test_automl_algorithm.py" line="23" name="test_automl_algorithm_dummy" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="26" name="test_init" time="0.834"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 17.618402
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 17.618402
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple135-pipeline_scores135-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[5-user_input12-4]" time="0.405"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: xgboost, extra_trees, random_forest, catboost, lightgbm, linear_model

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple5-pipeline_scores5-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Accuracy Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple143-pipeline_scores143-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="824" name="test_targets_data_types_classification[bool-Multiclass Classification]" time="6.254"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 20.762
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.181
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:04
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.252

Search finished after 00:05            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Multiclass: 0.180901
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple13-pipeline_scores13-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Accuracy Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple151-pipeline_scores151-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline MCC Binary: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple21-pipeline_scores21-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Balanced Accuracy Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple1-pipeline_scores1-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple159-pipeline_scores159-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline MCC Multiclass: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple29-pipeline_scores29-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Balanced Accuracy Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple9-pipeline_scores9-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple167-pipeline_scores167-nan]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline Root Mean Squared Error: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="47" name="test_init_objective" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="54" name="test_get_pipeline_none" time="0.002"><system-out>Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="60" name="test_data_split" time="0.863"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.269

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 17.269388
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 18.565

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 18.564932
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple37-pipeline_scores37-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple17-pipeline_scores17-nan]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple175-pipeline_scores175-nan]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple45-pipeline_scores45-nan]" time="0.195"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1 Micro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple25-pipeline_scores25-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple183-pipeline_scores183-nan]" time="0.191"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MAE: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple53-pipeline_scores53-nan]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1 Macro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple33-pipeline_scores33-nan]" time="0.193"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple191-pipeline_scores191-nan]" time="0.192"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MSE: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple61-pipeline_scores61-nan]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1 Weighted: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple41-pipeline_scores41-nan]" time="0.195"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple199-pipeline_scores199-nan]" time="0.192"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MedianAE: nan
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="76" name="test_max_pipelines" time="3.185"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.389
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.437
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:02
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.612
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:02
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.535

Search finished after 00:02            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.388713
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[2-user_input5-1]" time="0.362"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple69-pipeline_scores69-nan]" time="0.206"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple49-pipeline_scores49-nan]" time="0.203"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="55" name="test_callback" time="3.821"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: random_forest, catboost, linear_model, extra_trees, xgboost

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/3) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
(3/3) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838

Search finished after 00:03            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple57-pipeline_scores57-nan]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple77-pipeline_scores77-nan]" time="0.201"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision Micro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[5-user_input13-4]" time="0.407"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
Exiting AutoMLSearch.
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple65-pipeline_scores65-nan]" time="0.299"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple85-pipeline_scores85-nan]" time="0.210"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision Macro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple93-pipeline_scores93-nan]" time="0.208"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision Weighted: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple73-pipeline_scores73-nan]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple2-pipeline_scores2-0.1]" time="0.207"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple101-pipeline_scores101-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple81-pipeline_scores81-nan]" time="0.207"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple10-pipeline_scores10-0.1]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple109-pipeline_scores109-nan]" time="0.203"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC Micro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple89-pipeline_scores89-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple18-pipeline_scores18-0.1]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple117-pipeline_scores117-nan]" time="0.197"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC Macro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[2-user_input7-5]" time="0.407"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, random_forest, catboost, xgboost, lightgbm, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple26-pipeline_scores26-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple97-pipeline_scores97-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple125-pipeline_scores125-nan]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC Weighted: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple34-pipeline_scores34-0.1]" time="0.204"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple105-pipeline_scores105-nan]" time="0.204"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple133-pipeline_scores133-nan]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Log Loss Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[5-user_input15-5]" time="0.418"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, random_forest, catboost, xgboost, lightgbm, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple42-pipeline_scores42-0.1]" time="0.201"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple113-pipeline_scores113-nan]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple141-pipeline_scores141-nan]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Log Loss Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple50-pipeline_scores50-0.1]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple121-pipeline_scores121-nan]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple149-pipeline_scores149-nan]" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MCC Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple4-pipeline_scores4-0.1]" time="0.211"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Accuracy Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple58-pipeline_scores58-0.1]" time="0.212"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple129-pipeline_scores129-nan]" time="0.207"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Log Loss Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple157-pipeline_scores157-nan]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MCC Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple12-pipeline_scores12-0.1]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Accuracy Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple66-pipeline_scores66-0.1]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple137-pipeline_scores137-nan]" time="0.199"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Log Loss Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple165-pipeline_scores165-nan]" time="0.194"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Root Mean Squared Error: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple20-pipeline_scores20-0.1]" time="0.198"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Balanced Accuracy Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple74-pipeline_scores74-0.1]" time="0.196"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple145-pipeline_scores145-nan]" time="0.204"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple173-pipeline_scores173-nan]" time="0.201"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline R2: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple28-pipeline_scores28-0.1]" time="0.206"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Balanced Accuracy Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple82-pipeline_scores82-0.1]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple153-pipeline_scores153-nan]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple181-pipeline_scores181-nan]" time="0.206"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MAE: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple36-pipeline_scores36-0.1]" time="0.210"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple90-pipeline_scores90-0.1]" time="0.211"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple161-pipeline_scores161-nan]" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Root Mean Squared Error: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple189-pipeline_scores189-nan]" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MSE: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="84" name="test_recall_error" time="0.003"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple44-pipeline_scores44-0.1]" time="0.211"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1 Micro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="91" name="test_recall_object" time="0.417"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Recall. 
Greater score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Recall: 0.333

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Recall: 0.333333
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple98-pipeline_scores98-0.1]" time="0.214"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple169-pipeline_scores169-nan]" time="0.208"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline R2: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple197-pipeline_scores197-nan]" time="0.208"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MedianAE: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple52-pipeline_scores52-0.1]" time="0.214"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1 Macro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple106-pipeline_scores106-0.1]" time="0.215"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple177-pipeline_scores177-nan]" time="0.215"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MAE: 0.300000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="128" name="test_column_transformer_int_col_names[SelectColumns-answers1]" time="0.005"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="81" name="test_init" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="88" name="test_describe" time="0.003"><system-out>	 * param_a : value_a
	 * param_b : 123
	 * param_a : value_a
	 * param_b : 123
	 * param_a : value_a
	 * param_b : 123
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="99" name="test_describe_component" time="0.016"><system-out>	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * impute_strategy : mean
	 * fill_value : None
	 * impute_strategies : {&apos;a&apos;: &apos;mean&apos;, &apos;b&apos;: (&apos;constant&apos;, 100)}
	 * default_impute_strategy : most_frequent
	 * number_features : 5
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.3
	 * threshold : -inf
	 * n_jobs : -1
	 * columns : [&apos;col_one&apos;, &apos;col_two&apos;]
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * n_estimators : 10
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 10
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 10
	 * max_depth : 3
	 * n_jobs : -1
	 * n_estimators : 10
	 * max_depth : 3
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * eta : 0.1
	 * max_depth : 3
	 * min_child_weight : 1
	 * n_estimators : 75
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="146" name="test_missing_attributes" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="167" name="test_missing_methods_on_components" time="0.008"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="203" name="test_component_fit" time="0.003"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="99" name="test_binary_auto" time="3.142"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.389
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.437
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.612
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.535

Search finished after 00:02            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Log Loss Binary: 0.388713
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="227" name="test_component_fit_transform" time="0.005"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple60-pipeline_scores60-0.1]" time="0.219"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline F1 Weighted: 0.300000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="305" name="test_model_family_components" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="313" name="test_regressor_call_predict_proba" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="322" name="test_component_describe" time="0.002"><system-out>
Mock Component
==============
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="330" name="test_component_parameters_getter" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="338" name="test_component_parameters_init" time="0.038"><system-out>Testing component Baseline Regressor
Testing component Extra Trees Regressor
Testing component XGBoost Regressor
Testing component CatBoost Regressor
Testing component Random Forest Regressor
Testing component Linear Regressor
Testing component Elastic Net Regressor
Testing component LightGBM Classifier
Testing component Baseline Classifier
Testing component Extra Trees Classifier
Testing component Elastic Net Classifier
Testing component CatBoost Classifier
Testing component XGBoost Classifier
Testing component Random Forest Classifier
Testing component Logistic Regression Classifier
Testing component LSA Transformer
Testing component Drop Null Columns Transformer
Testing component DateTime Featurization Component
Testing component Select Columns Transformer
Testing component Drop Columns Transformer
Testing component Standard Scaler
Testing component Imputer
Testing component Per Column Imputer
Testing component Simple Imputer
Testing component RF Regressor Select From Model
Testing component RF Classifier Select From Model
Testing component One Hot Encoder
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple114-pipeline_scores114-0.1]" time="0.226"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple185-pipeline_scores185-nan]" time="0.214"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MSE: 0.300000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="350" name="test_clone_init" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="357" name="test_clone_random_state" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="369" name="test_clone_fitted" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="389" name="test_components_init_kwargs" time="0.033"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="410" name="test_component_has_random_state" time="0.016"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="416" name="test_transformer_transform_output_type" time="3.056"><system-out>Testing transformer LSA Transformer
Checking output of transform for transformer &quot;LSA Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;LSA Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;LSA Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;LSA Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Drop Null Columns Transformer
Checking output of transform for transformer &quot;Drop Null Columns Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Drop Null Columns Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Drop Null Columns Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Drop Null Columns Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer DateTime Featurization Component
Checking output of transform for transformer &quot;DateTime Featurization Component&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;DateTime Featurization Component&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;DateTime Featurization Component&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;DateTime Featurization Component&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Select Columns Transformer
Checking output of transform for transformer &quot;Select Columns Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Select Columns Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Select Columns Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Select Columns Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Drop Columns Transformer
Checking output of transform for transformer &quot;Drop Columns Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Drop Columns Transformer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Drop Columns Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Drop Columns Transformer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Standard Scaler
Checking output of transform for transformer &quot;Standard Scaler&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Standard Scaler&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Standard Scaler&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Standard Scaler&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Imputer
Checking output of transform for transformer &quot;Imputer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Imputer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Imputer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Imputer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Per Column Imputer
Checking output of transform for transformer &quot;Per Column Imputer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Per Column Imputer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Per Column Imputer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Per Column Imputer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer Simple Imputer
Checking output of transform for transformer &quot;Simple Imputer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;Simple Imputer&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;Simple Imputer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;Simple Imputer&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer RF Regressor Select From Model
Checking output of transform for transformer &quot;RF Regressor Select From Model&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;RF Regressor Select From Model&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;RF Regressor Select From Model&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;RF Regressor Select From Model&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer RF Classifier Select From Model
Checking output of transform for transformer &quot;RF Classifier Select From Model&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;RF Classifier Select From Model&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;RF Classifier Select From Model&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;RF Classifier Select From Model&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Testing transformer One Hot Encoder
Checking output of transform for transformer &quot;One Hot Encoder&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of transform for transformer &quot;One Hot Encoder&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of transform for transformer &quot;One Hot Encoder&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of transform for transformer &quot;One Hot Encoder&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple68-pipeline_scores68-0.1]" time="0.226"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple193-pipeline_scores193-nan]" time="0.225"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MedianAE: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple122-pipeline_scores122-0.1]" time="0.228"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="79" name="test_early_stopping" time="0.002"><system-out>

2 iterations without improvement. Stopping search early...
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="102" name="test_plot_disabled_missing_dependency" time="0.003"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="113" name="test_plot_iterations_max_pipelines" time="3.095"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: random_forest, catboost, linear_model, extra_trees, xgboost

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/3) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
(3/3) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838

Search finished after 00:02            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple76-pipeline_scores76-0.1]" time="0.220"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision Micro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple201-pipeline_scores201-nan]" time="0.217"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.400

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MaxError: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple130-pipeline_scores130-0.1]" time="0.218"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.400

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple84-pipeline_scores84-0.1]" time="0.233"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision Macro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[BaselineRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[ExtraTreesRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[XGBoostRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple138-pipeline_scores138-0.1]" time="0.238"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[CatBoostRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[RandomForestRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[LinearRegressor]" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[ElasticNetRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[LightGBMClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[BaselineClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[ExtraTreesClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[ElasticNetClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[CatBoostClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[XGBoostClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[RandomForestClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[LogisticRegressionClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[LSA]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[DropNullColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[DateTimeFeaturizer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[SelectColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[DropColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[StandardScaler]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[Imputer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[PerColumnImputer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[SimpleImputer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[RFRegressorSelectFromModel]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[RFClassifierSelectFromModel]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="510" name="test_default_parameters_raise_no_warnings[OneHotEncoder]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="518" name="test_estimator_check_for_fit" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="553" name="test_estimator_check_for_fit_with_overrides" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="600" name="test_transformer_check_for_fit" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="627" name="test_transformer_check_for_fit_with_overrides" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="661" name="test_all_transformers_needs_fitting" time="0.015"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="669" name="test_all_transformers_check_fit" time="0.861"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[2-user_input6-5]" time="0.432"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple92-pipeline_scores92-0.1]" time="0.227"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline Precision Weighted: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple146-pipeline_scores146-0.1]" time="0.226"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple100-pipeline_scores100-0.1]" time="0.227"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple154-pipeline_scores154-0.1]" time="0.207"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[1-user_input3-5]" time="0.467"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[5-user_input14-5]" time="0.435"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: xgboost, extra_trees, lightgbm, random_forest, linear_model, catboost

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple108-pipeline_scores108-0.1]" time="0.248"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC Micro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple162-pipeline_scores162-0.1]" time="0.252"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline Root Mean Squared Error: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple116-pipeline_scores116-0.1]" time="0.219"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC Macro: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple170-pipeline_scores170-0.1]" time="0.219"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline R2: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="687" name="test_all_estimators_check_fit" time="5.104"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple3-pipeline_scores3-nan]" time="0.224"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="883" name="test_catch_keyboard_interrupt[3-user_input11-5]" time="0.468"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: catboost, lightgbm, extra_trees, xgboost, random_forest, linear_model

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline F1: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple124-pipeline_scores124-0.1]" time="0.221"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline AUC Weighted: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple178-pipeline_scores178-0.1]" time="0.217"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple11-pipeline_scores11-nan]" time="0.224"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple132-pipeline_scores132-0.1]" time="0.233"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple186-pipeline_scores186-0.1]" time="0.236"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MSE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple19-pipeline_scores19-nan]" time="0.238"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple0-pipeline_scores0-0.1]" time="0.239"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple140-pipeline_scores140-0.1]" time="0.238"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple194-pipeline_scores194-0.1]" time="0.234"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MedianAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple27-pipeline_scores27-nan]" time="0.233"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple8-pipeline_scores8-0.1]" time="0.231"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple148-pipeline_scores148-0.1]" time="0.232"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MCC Binary: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple202-pipeline_scores202-0.1]" time="0.323"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MaxError: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple35-pipeline_scores35-nan]" time="0.230"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple16-pipeline_scores16-0.1]" time="0.236"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple156-pipeline_scores156-0.1]" time="0.237"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline MCC Multiclass: 0.300000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_et_classifier" file="evalml/tests/component_tests/test_et_classifier.py" line="12" name="test_problem_types" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple43-pipeline_scores43-nan]" time="0.234"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_et_classifier" file="evalml/tests/component_tests/test_et_classifier.py" line="18" name="test_et_parameters" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_et_classifier" file="evalml/tests/component_tests/test_et_classifier.py" line="31" name="test_fit_predict_binary" time="0.512"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple24-pipeline_scores24-0.1]" time="0.225"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Balanced Accuracy Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Balanced Accuracy Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Balanced Accuracy Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple164-pipeline_scores164-0.1]" time="0.218"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline Root Mean Squared Error: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="110" name="test_multi_auto" time="9.081"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.350
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.860
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:04
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.791
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:05
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.779
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:06
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.830

Search finished after 00:06            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Precision Micro: 0.860071
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple51-pipeline_scores51-nan]" time="0.231"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="463" name="test_estimator_predict_output_type" time="19.785"><system-out>Checking output of predict for estimator &quot;Extra Trees Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Extra Trees Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Extra Trees Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Extra Trees Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;XGBoost Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;XGBoost Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;XGBoost Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;XGBoost Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;CatBoost Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;CatBoost Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;CatBoost Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;CatBoost Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Random Forest Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Random Forest Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Random Forest Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Random Forest Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Linear Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Linear Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Linear Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Linear Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Elastic Net Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Elastic Net Regressor&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Elastic Net Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Elastic Net Regressor&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols RangeIndex(start=0, stop=20, step=1), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Index([&apos;x0&apos;, &apos;x1&apos;, &apos;x2&apos;, &apos;x3&apos;, &apos;x4&apos;, &apos;x5&apos;, &apos;x6&apos;, &apos;x7&apos;, &apos;x8&apos;, &apos;x9&apos;, &apos;x10&apos;,
       &apos;x11&apos;, &apos;x12&apos;, &apos;x13&apos;, &apos;x14&apos;, &apos;x15&apos;, &apos;x16&apos;, &apos;x17&apos;, &apos;x18&apos;, &apos;x19&apos;],
      dtype=&apos;object&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;LightGBM Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;Extra Trees Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;Elastic Net Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;CatBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;XGBoost Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;Random Forest Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;numpy.ndarray&apos;&gt; name None
Checking output of predict for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;numpy.ndarray&apos;&gt; cols None, y type &lt;class &apos;list&apos;&gt; name None
Checking output of predict for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict_proba for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name None
Checking output of predict for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
Checking output of predict_proba for estimator &quot;Logistic Regression Classifier&quot; on X type &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; cols Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19],
           dtype=&apos;int64&apos;), y type &lt;class &apos;pandas.core.series.Series&apos;&gt; name target
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple32-pipeline_scores32-0.1]" time="0.233"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple172-pipeline_scores172-0.1]" time="0.230"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan

Search finished after 00:00            
Best pipeline: Pipeline1
Best pipeline R2: 0.300000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple59-pipeline_scores59-nan]" time="0.226"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="131" name="test_plot_iterations_max_time" time="14.266"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Will stop searching for new pipelines after 10 seconds.

Allowed model families: random_forest, catboost, linear_model, extra_trees, xgboost

Mean Baseline Regression Pipeline        Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
Extra Trees Regressor w/ Imputer         Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
XGBoost Regressor w/ Imputer             Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838
CatBoost Regressor w/ Imputer            Elapsed: 00:06
	Starting cross validation
	Finished cross validation - mean R2: 0.137
Random Forest Regressor w/ Imputer       Elapsed: 00:07
	Starting cross validation
	Finished cross validation - mean R2: 0.844
Linear Regressor w/ Imputer + Standar... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 0.939
Linear Regressor w/ Imputer + Standar... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 1.000
Linear Regressor w/ Imputer + Standar... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 0.992
Linear Regressor w/ Imputer + Standar... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 0.992
Linear Regressor w/ Imputer + Standar... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 0.992
Linear Regressor w/ Imputer + Standar... Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean R2: 0.992
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:09
	Starting cross validation
	Finished cross validation - mean R2: 0.750
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:09
	Starting cross validation
	Finished cross validation - mean R2: 0.757
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:09
	Starting cross validation
	Finished cross validation - mean R2: 0.969
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:09
	Starting cross validation
	Finished cross validation - mean R2: 0.749
Elastic Net Regressor w/ Imputer + St... Elapsed: 00:09
	Starting cross validation
	Finished cross validation - mean R2: 0.837
Extra Trees Regressor w/ Imputer         Elapsed: 00:09
	Starting cross validation
	Finished cross validation - mean R2: 0.612

Search finished after 00:13            
Best pipeline: Linear Regressor w/ Imputer + Standard Scaler
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple40-pipeline_scores40-0.1]" time="0.226"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_et_classifier" file="evalml/tests/component_tests/test_et_classifier.py" line="48" name="test_fit_predict_multi" time="0.501"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple180-pipeline_scores180-0.1]" time="0.220"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple67-pipeline_scores67-nan]" time="0.231"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple48-pipeline_scores48-0.1]" time="0.225"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple188-pipeline_scores188-0.1]" time="0.227"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MSE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple75-pipeline_scores75-nan]" time="0.234"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple56-pipeline_scores56-0.1]" time="0.240"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1 Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1 Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline F1 Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple196-pipeline_scores196-0.1]" time="0.228"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MedianAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_et_classifier" file="evalml/tests/component_tests/test_et_classifier.py" line="65" name="test_feature_importance" time="0.441"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple83-pipeline_scores83-nan]" time="0.224"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple64-pipeline_scores64-0.1]" time="0.221"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple204-pipeline_scores204-0.1]" time="0.220"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MaxError: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple91-pipeline_scores91-nan]" time="0.214"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple72-pipeline_scores72-0.1]" time="0.212"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="92" name="test_random_state" time="2.278"></testcase><testcase classname="evalml.tests.component_tests.test_et_regressor" file="evalml/tests/component_tests/test_et_regressor.py" line="8" name="test_model_family" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_et_regressor" file="evalml/tests/component_tests/test_et_regressor.py" line="12" name="test_problem_types" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_et_regressor" file="evalml/tests/component_tests/test_et_regressor.py" line="17" name="test_et_parameters" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_et_regressor" file="evalml/tests/component_tests/test_et_regressor.py" line="30" name="test_fit_predict" time="0.399"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple99-pipeline_scores99-nan]" time="0.214"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple80-pipeline_scores80-0.1]" time="0.216"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple107-pipeline_scores107-nan]" time="0.318"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple88-pipeline_scores88-0.1]" time="0.336"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Precision Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_et_regressor" file="evalml/tests/component_tests/test_et_regressor.py" line="44" name="test_feature_importance" time="0.590"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple115-pipeline_scores115-nan]" time="0.307"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple96-pipeline_scores96-0.1]" time="0.298"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple123-pipeline_scores123-nan]" time="0.323"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_feature_selectors" file="evalml/tests/component_tests/test_feature_selectors.py" line="29" name="test_init" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_feature_selectors" file="evalml/tests/component_tests/test_feature_selectors.py" line="35" name="test_component_fit" time="0.250"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple104-pipeline_scores104-0.1]" time="0.318"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Micro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Micro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Micro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_feature_selectors" file="evalml/tests/component_tests/test_feature_selectors.py" line="46" name="test_feature_selector_missing_component_obj" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="26" name="test_invalid_strategy_parameters" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="33" name="test_imputer_default_parameters" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[mean-most_frequent]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[mean-constant]" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[median-most_frequent]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[median-constant]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[most_frequent-most_frequent]" time="0.003"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple131-pipeline_scores131-nan]" time="0.281"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Log Loss Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[most_frequent-constant]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[constant-most_frequent]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="44" name="test_imputer_init[constant-constant]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="67" name="test_numeric_only_input" time="0.075"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple112-pipeline_scores112-0.1]" time="0.263"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Macro. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Macro: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Macro: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="87" name="test_categorical_only_input" time="0.100"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="109" name="test_categorical_and_numeric_input" time="0.127"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple139-pipeline_scores139-nan]" time="0.215"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Log Loss Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple120-pipeline_scores120-0.1]" time="0.213"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC Weighted. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC Weighted: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline AUC Weighted: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="134" name="test_drop_all_columns" time="0.026"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="148" name="test_typed_imputer_numpy_input" time="0.040"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="166" name="test_imputer_datetime_input" time="0.024"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="183" name="test_imputer_empty_data[np]" time="0.020"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="183" name="test_imputer_empty_data[pd]" time="0.017"></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="203" name="test_imputer_resets_index" time="0.022"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple147-pipeline_scores147-nan]" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="224" name="test_imputer_fill_value" time="0.080"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple128-pipeline_scores128-0.1]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 0.400

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 0.100000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_imputer" file="evalml/tests/component_tests/test_imputer.py" line="247" name="test_imputer_no_nans" time="0.060"></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="22" name="test_model_family" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="26" name="test_problem_types" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="30" name="test_et_parameters" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="44" name="test_fit_predict_binary" time="1.383"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple155-pipeline_scores155-nan]" time="0.213"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple136-pipeline_scores136-0.1]" time="0.212"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple163-pipeline_scores163-nan]" time="0.211"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline Root Mean Squared Error: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple144-pipeline_scores144-0.1]" time="0.215"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Binary. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Binary: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Binary: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="101" name="test_fit_string_features" time="0.715"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple171-pipeline_scores171-nan]" time="0.209"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline R2: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="713" name="test_no_fitting_required_components" time="0.021"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple152-pipeline_scores152-0.1]" time="0.208"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MCC Multiclass. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MCC Multiclass: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MCC Multiclass: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="724" name="test_serialization" time="7.521"><system-out>Testing serialization of component Baseline Regressor
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
	 * strategy : mean
Testing serialization of component Extra Trees Regressor
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
Testing serialization of component XGBoost Regressor
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
Testing serialization of component CatBoost Regressor
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
Testing serialization of component Random Forest Regressor
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
Testing serialization of component Linear Regressor
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
	 * fit_intercept : True
	 * normalize : False
	 * n_jobs : -1
Testing serialization of component Elastic Net Regressor
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * max_iter : 1000
	 * normalize : False
Testing serialization of component LightGBM Classifier
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
	 * boosting_type : gbdt
	 * learning_rate : 0.1
	 * n_estimators : 100
	 * max_depth : -1
	 * num_leaves : 31
	 * min_child_samples : 20
	 * n_jobs : -1
Testing serialization of component Baseline Classifier
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
	 * strategy : mode
Testing serialization of component Extra Trees Classifier
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_features : auto
	 * max_depth : 6
	 * min_samples_split : 2
	 * min_weight_fraction_leaf : 0.0
	 * n_jobs : -1
Testing serialization of component Elastic Net Classifier
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
	 * alpha : 0.5
	 * l1_ratio : 0.5
	 * n_jobs : -1
	 * max_iter : 1000
Testing serialization of component CatBoost Classifier
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
	 * n_estimators : 10
	 * eta : 0.03
	 * max_depth : 6
	 * bootstrap_type : None
Testing serialization of component XGBoost Classifier
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
	 * eta : 0.1
	 * max_depth : 6
	 * min_child_weight : 1
	 * n_estimators : 100
Testing serialization of component Random Forest Classifier
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
	 * n_estimators : 100
	 * max_depth : 6
	 * n_jobs : -1
Testing serialization of component Logistic Regression Classifier
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
Testing serialization of component LSA Transformer
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
	 * text_columns : None
Testing serialization of component Drop Null Columns Transformer
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
	 * pct_null_threshold : 1.0
Testing serialization of component DateTime Featurization Component
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
	 * features_to_extract : [&apos;year&apos;, &apos;month&apos;, &apos;day_of_week&apos;, &apos;hour&apos;]
Testing serialization of component Select Columns Transformer
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
Testing serialization of component Drop Columns Transformer
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
	 * columns : None
Testing serialization of component Standard Scaler
Testing serialization of component Imputer
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
Testing serialization of component Per Column Imputer
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
	 * impute_strategies : None
	 * default_impute_strategy : most_frequent
Testing serialization of component Simple Imputer
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
	 * impute_strategy : most_frequent
	 * fill_value : None
Testing serialization of component RF Regressor Select From Model
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
Testing serialization of component RF Classifier Select From Model
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
	 * number_features : None
	 * n_estimators : 10
	 * max_depth : None
	 * percent_features : 0.5
	 * threshold : -inf
	 * n_jobs : -1
Testing serialization of component One Hot Encoder
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple179-pipeline_scores179-nan]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MAE: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple160-pipeline_scores160-0.1]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Root Mean Squared Error. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Root Mean Squared Error: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline Root Mean Squared Error: 0.100000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple187-pipeline_scores187-nan]" time="0.211"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MSE: 0.400000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple168-pipeline_scores168-0.1]" time="0.210"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline R2: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="112" name="test_correct_args" time="0.090"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="22" name="test_lsa_only_text" time="0.025"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple195-pipeline_scores195-nan]" time="0.207"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MedianAE: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="37" name="test_lsa_with_nontext" time="0.019"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple176-pipeline_scores176-0.1]" time="0.205"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MAE: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="54" name="test_lsa_no_text" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="62" name="test_some_missing_col_names" time="0.020"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="80" name="test_all_missing_col_names" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="89" name="test_empty_text_column" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="96" name="test_index_col_names" time="0.017"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="113" name="test_int_col_names" time="0.018"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="134" name="test_repeat_col_names" time="0.021"></testcase><testcase classname="evalml.tests.component_tests.test_lsa" file="evalml/tests/component_tests/test_lsa.py" line="148" name="test_lsa_output" time="0.015"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="8" name="test_init" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="18" name="test_parameters" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="30" name="test_invalid_inputs" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="53" name="test_null_values_in_dataframe" time="0.056"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple203-pipeline_scores203-nan]" time="0.200"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: nan
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.400

Search finished after 00:00            
Best pipeline: Pipeline2
Best pipeline MaxError: 0.400000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="108" name="test_drop" time="0.016"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple184-pipeline_scores184-0.1]" time="0.201"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MSE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MSE: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MSE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="121" name="test_handle_unknown" time="0.024"></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="61" name="test_fit_predict_multi" time="4.672"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="140" name="test_no_top_n" time="0.024"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="172" name="test_categories" time="0.013"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="199" name="test_less_than_top_n_unique_values" time="0.017"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="215" name="test_more_top_n_unique_values" time="0.023"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="248" name="test_more_top_n_unique_values_large" time="0.022"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="272" name="test_categorical_dtype" time="0.021"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="292" name="test_all_numerical_dtype" time="0.012"></testcase><testcase classname="evalml.tests.component_tests.test_xgboost_regressor" file="evalml/tests/component_tests/test_xgboost_regressor.py" line="10" name="test_xgboost_regressor_random_state_bounds_seed" time="0.016"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="305" name="test_numpy_input" time="0.013"></testcase><testcase classname="evalml.tests.component_tests.test_xgboost_regressor" file="evalml/tests/component_tests/test_xgboost_regressor.py" line="22" name="test_xgboost_regressor_random_state_bounds_rng" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="313" name="test_large_number_of_categories" time="0.526"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple192-pipeline_scores192-0.1]" time="0.204"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MedianAE. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MedianAE: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MedianAE: 0.100000
</system-out></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check" file="evalml/tests/data_checks_tests/test_data_check.py" line="18" name="test_data_check_name" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check" file="evalml/tests/data_checks_tests/test_data_check.py" line="29" name="test_empty_data_check_validate" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check" file="evalml/tests/data_checks_tests/test_data_check.py" line="33" name="test_data_check_validate_simple" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check" file="evalml/tests/data_checks_tests/test_data_check.py" line="44" name="test_data_check_with_param" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="31" name="test_data_check_message_attributes" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="37" name="test_data_check_message_str" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="41" name="test_data_check_message_eq" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="49" name="test_data_check_warning_attributes" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="55" name="test_data_check_warning_str" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="59" name="test_data_check_warning_eq" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="67" name="test_data_check_error_attributes" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="73" name="test_data_check_error_str" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="77" name="test_data_check_error_eq" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_check_message" file="evalml/tests/data_checks_tests/test_data_check_message.py" line="85" name="test_warning_error_eq" time="0.001"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_checks" file="evalml/tests/data_checks_tests/test_data_checks.py" line="13" name="test_data_checks" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_checks" file="evalml/tests/data_checks_tests/test_data_checks.py" line="40" name="test_empty_data_checks" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_checks" file="evalml/tests/data_checks_tests/test_data_checks.py" line="55" name="test_default_data_checks_classification" time="0.030"></testcase><testcase classname="evalml.tests.data_checks_tests.test_data_checks" file="evalml/tests/data_checks_tests/test_data_checks.py" line="75" name="test_default_data_checks_regression" time="0.031"></testcase><testcase classname="evalml.tests.data_checks_tests.test_highly_null_data_check" file="evalml/tests/data_checks_tests/test_highly_null_data_check.py" line="8" name="test_highly_null_data_check_init" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_highly_null_data_check" file="evalml/tests/data_checks_tests/test_highly_null_data_check.py" line="27" name="test_highly_null_data_check_warnings" time="0.005"></testcase><testcase classname="evalml.tests.data_checks_tests.test_highly_null_data_check" file="evalml/tests/data_checks_tests/test_highly_null_data_check.py" line="41" name="test_highly_null_data_check_input_formats" time="0.007"></testcase><testcase classname="evalml.tests.data_checks_tests.test_id_columns_data_check" file="evalml/tests/data_checks_tests/test_id_columns_data_check.py" line="8" name="test_id_cols_data_check_init" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_id_columns_data_check" file="evalml/tests/data_checks_tests/test_id_columns_data_check.py" line="27" name="test_id_columns_warning" time="0.011"></testcase><testcase classname="evalml.tests.data_checks_tests.test_id_columns_data_check" file="evalml/tests/data_checks_tests/test_id_columns_data_check.py" line="48" name="test_id_columns_strings" time="0.011"></testcase><testcase classname="evalml.tests.data_checks_tests.test_id_columns_data_check" file="evalml/tests/data_checks_tests/test_id_columns_data_check.py" line="68" name="test_id_cols_data_check_input_formats" time="0.019"></testcase><testcase classname="evalml.tests.data_checks_tests.test_invalid_targets_data_check" file="evalml/tests/data_checks_tests/test_invalid_targets_data_check.py" line="13" name="test_invalid_target_data_check_nan_error" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_invalid_targets_data_check" file="evalml/tests/data_checks_tests/test_invalid_targets_data_check.py" line="21" name="test_invalid_target_data_check_numeric_binary_classification_valid_float" time="0.003"></testcase><testcase classname="evalml.tests.data_checks_tests.test_invalid_targets_data_check" file="evalml/tests/data_checks_tests/test_invalid_targets_data_check.py" line="27" name="test_invalid_target_data_check_numeric_binary_classification_error" time="0.005"></testcase><testcase classname="evalml.tests.automl_tests.test_automl" file="evalml/tests/automl_tests/test_automl.py" line="962" name="test_percent_better_than_baseline_in_rankings[objective_tuple200-pipeline_scores200-0.1]" time="0.202"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for MaxError. 
Lower score is better.

Searching up to 3 pipelines. 
Allowed model families: none

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.100
(2/3) Pipeline1                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.300
(3/3) Pipeline2                                Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean MaxError: 0.400

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline MaxError: 0.100000
</system-out></testcase><testcase classname="evalml.tests.data_checks_tests.test_invalid_targets_data_check" file="evalml/tests/data_checks_tests/test_invalid_targets_data_check.py" line="35" name="test_invalid_target_data_check_invalid_data_types_error" time="0.018"></testcase><testcase classname="evalml.tests.data_checks_tests.test_invalid_targets_data_check" file="evalml/tests/data_checks_tests/test_invalid_targets_data_check.py" line="48" name="test_invalid_target_data_input_formats" time="0.008"></testcase><testcase classname="evalml.tests.data_checks_tests.test_label_leakage_data_check" file="evalml/tests/data_checks_tests/test_label_leakage_data_check.py" line="7" name="test_label_leakage_data_check_init" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_label_leakage_data_check" file="evalml/tests/data_checks_tests/test_label_leakage_data_check.py" line="26" name="test_label_leakage_data_check_warnings" time="0.013"></testcase><testcase classname="evalml.tests.demo_tests.test_datasets" file="evalml/tests/demo_tests/test_datasets.py" line="21" name="test_diabetes" time="0.025"></testcase><testcase classname="evalml.tests.model_family_tests.test_model_family" file="evalml/tests/model_family_tests/test_model_family.py" line="11" name="test_handle_string" time="0.002"></testcase><testcase classname="evalml.tests.model_family_tests.test_model_family" file="evalml/tests/model_family_tests/test_model_family.py" line="22" name="test_handle_model_family" time="0.001"></testcase><testcase classname="evalml.tests.model_family_tests.test_model_family" file="evalml/tests/model_family_tests/test_model_family.py" line="27" name="test_handle_incorrect_type" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="43" name="test_confusion_matrix[np]" time="0.011"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="43" name="test_confusion_matrix[pd]" time="0.009"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="70" name="test_normalize_confusion_matrix[np]" time="0.010"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="70" name="test_normalize_confusion_matrix[pd]" time="0.015"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="103" name="test_normalize_confusion_matrix_error" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="129" name="test_precision_recall_curve_return_type" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="139" name="test_precision_recall_curve" time="0.003"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="157" name="test_graph_precision_recall_curve[np]" time="0.026"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="157" name="test_graph_precision_recall_curve[pd]" time="0.018"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="179" name="test_graph_precision_recall_curve_title_addition" time="0.116"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="214" name="test_graph_roc_curve_binary[pd]" time="0.028"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="237" name="test_graph_roc_curve_nans" time="0.040"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="251" name="test_graph_roc_curve_multiclass" time="0.025"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="272" name="test_graph_roc_curve_multiclass_custom_class_names" time="0.024"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="190" name="test_roc_curve_binary[np]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="329" name="test_data_types[list]" time="0.011"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="190" name="test_roc_curve_binary[pd]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="214" name="test_graph_roc_curve_binary[np]" time="0.021"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="290" name="test_graph_roc_curve_title_addition" time="0.016"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="329" name="test_data_types[np]" time="0.011"></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="329" name="test_data_types[pd_no_index]" time="0.010"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="301" name="test_graph_confusion_matrix_default[np]" time="0.058"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesRegressor-Binary Classification-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.component_tests.test_one_hot_encoder" file="evalml/tests/component_tests/test_one_hot_encoder.py" line="329" name="test_data_types[pd_index]" time="0.013"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesRegressor-Multiclass Classification-1]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesRegressor-Multiclass Classification-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostRegressor-Regression-1]" time="0.193"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="18" name="test_invalid_parameters" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="28" name="test_all_strategies" time="0.045"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="301" name="test_graph_confusion_matrix_default[pd]" time="0.026"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="54" name="test_fit_transform" time="0.023"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="329" name="test_graph_confusion_matrix_norm_disabled" time="0.024"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="80" name="test_non_numeric_errors" time="0.026"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="353" name="test_graph_confusion_matrix_title_addition" time="0.020"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="103" name="test_non_numeric_valid" time="0.081"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="364" name="test_get_permutation_importance_invalid_objective" time="0.053"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="371" name="test_get_permutation_importance_binary[np]" time="36.858"></testcase><testcase classname="evalml.tests.data_checks_tests.test_label_leakage_data_check" file="evalml/tests/data_checks_tests/test_label_leakage_data_check.py" line="43" name="test_label_leakage_data_check_input_formats" time="0.021"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostRegressor-Regression-5]" time="0.143"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X0-y0-True-expected_validation_result0]" time="0.003"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X1-y1-False-expected_validation_result1]" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X2-y2-True-expected_validation_result2]" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X3-y3-False-expected_validation_result3]" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X4-y4-False-expected_validation_result4]" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X5-y5-True-expected_validation_result5]" time="0.005"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X6-y6-True-expected_validation_result6]" time="0.003"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X7-y7-False-expected_validation_result7]" time="0.003"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X8-y8-True-expected_validation_result8]" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X9-y9-False-expected_validation_result9]" time="0.004"></testcase><testcase classname="evalml.tests.data_checks_tests.test_no_variance_data_check" file="evalml/tests/data_checks_tests/test_no_variance_data_check.py" line="48" name="test_no_variance_data_check_warnings[X10-y10-False-expected_validation_result10]" time="0.003"></testcase><testcase classname="evalml.tests.data_checks_tests.test_outliers_data_check" file="evalml/tests/data_checks_tests/test_outliers_data_check.py" line="8" name="test_outliers_data_check_init" time="0.002"></testcase><testcase classname="evalml.tests.data_checks_tests.test_outliers_data_check" file="evalml/tests/data_checks_tests/test_outliers_data_check.py" line="16" name="test_outliers_data_check_warnings" time="0.521"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostRegressor-Binary Classification-1]" time="0.006"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostRegressor-Binary Classification-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostRegressor-Multiclass Classification-1]" time="0.006"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostRegressor-Multiclass Classification-5]" time="0.008"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestRegressor-Regression-1]" time="0.463"></testcase><testcase classname="evalml.tests.data_checks_tests.test_outliers_data_check" file="evalml/tests/data_checks_tests/test_outliers_data_check.py" line="33" name="test_outliers_data_check_input_formats" time="0.505"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestRegressor-Regression-5]" time="0.448"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestRegressor-Binary Classification-1]" time="0.006"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestRegressor-Binary Classification-5]" time="0.007"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.demo_tests.test_datasets" file="evalml/tests/demo_tests/test_datasets.py" line="3" name="test_fraud" time="0.390"><system-out>             Number of Features
Boolean                       1
Categorical                   6
Numeric                       5

Number of training examples: 99992
Labels
False    84.82%
True     15.18%
Name: fraud, dtype: object
             Number of Features
Boolean                       1
Categorical                   6
Numeric                       5

Number of training examples: 1000
Labels
False    85.90%
True     14.10%
Name: fraud, dtype: object
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestRegressor-Multiclass Classification-1]" time="0.006"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestRegressor-Multiclass Classification-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LinearRegressor-Regression-1]" time="1.518"><system-err>  0%|          | 0/1 [00:00&lt;?, ?it/s]100%|██████████| 1/1 [00:01&lt;00:00,  1.43s/it]100%|██████████| 1/1 [00:01&lt;00:00,  1.44s/it]
</system-err></testcase><testcase classname="evalml.tests.demo_tests.test_datasets" file="evalml/tests/demo_tests/test_datasets.py" line="11" name="test_wine" time="0.008"></testcase><testcase classname="evalml.tests.demo_tests.test_datasets" file="evalml/tests/demo_tests/test_datasets.py" line="16" name="test_breast_cancer" time="0.020"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LightGBMClassifier-Multiclass Classification-1]" time="2.733"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LinearRegressor-Regression-5]" time="7.671"><system-err>  0%|          | 0/5 [00:00&lt;?, ?it/s] 20%|██        | 1/5 [00:01&lt;00:05,  1.43s/it] 40%|████      | 2/5 [00:02&lt;00:04,  1.41s/it] 60%|██████    | 3/5 [00:04&lt;00:02,  1.43s/it] 80%|████████  | 4/5 [00:06&lt;00:01,  1.57s/it]100%|██████████| 5/5 [00:07&lt;00:00,  1.53s/it]100%|██████████| 5/5 [00:07&lt;00:00,  1.52s/it]
</system-err></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="128" name="test_multi_objective" time="0.006"><system-out>Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="148" name="test_categorical_classification" time="12.101"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.000
(2/5) LightGBM Classifier w/ Imputer + One ... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.742
(3/5) Extra Trees Classifier w/ Imputer + O... Elapsed:00:09
	Starting cross validation
	Finished cross validation - mean Precision: 0.772
(4/5) Elastic Net Classifier w/ Imputer + O... Elapsed:00:10
	Starting cross validation
	Finished cross validation - mean Precision: 0.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:11
	Starting cross validation
	Finished cross validation - mean Precision: 0.755

Search finished after 00:11            
Best pipeline: Extra Trees Classifier w/ Imputer + One Hot Encoder
Best pipeline Precision: 0.772306
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_lgbm_classifier" file="evalml/tests/component_tests/test_lgbm_classifier.py" line="78" name="test_feature_importance" time="0.953"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LightGBMClassifier-Multiclass Classification-5]" time="2.319"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="133" name="test_fit_transform_drop_all_nan_columns" time="0.034"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="149" name="test_transform_drop_all_nan_columns" time="0.035"></testcase><testcase classname="evalml.tests.component_tests.test_per_column_imputer" file="evalml/tests/component_tests/test_per_column_imputer.py" line="165" name="test_transform_drop_all_nan_columns_empty" time="0.052"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="8" name="test_median" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="24" name="test_mean" time="0.012"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="37" name="test_constant" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="51" name="test_most_frequent" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="64" name="test_col_with_non_numeric" time="0.033"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="100" name="test_fit_transform_drop_all_nan_columns" time="0.015"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="114" name="test_transform_drop_all_nan_columns" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="127" name="test_transform_drop_all_nan_columns_empty" time="0.021"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="139" name="test_numpy_input" time="0.009"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="153" name="test_simple_imputer_fill_value[numeric]" time="0.018"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="153" name="test_simple_imputer_fill_value[categorical]" time="0.033"></testcase><testcase classname="evalml.tests.component_tests.test_simple_imputer" file="evalml/tests/component_tests/test_simple_imputer.py" line="186" name="test_simple_imputer_resets_index" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_utils" file="evalml/tests/component_tests/test_utils.py" line="12" name="test_all_components" time="0.015"><failure message="assert 27 == 28
  -27
  +28">has_minimal_dependencies = False

    def test_all_components(has_minimal_dependencies):
        if has_minimal_dependencies:
            assert len(all_components()) == 23
        else:
&gt;           assert len(all_components()) == 28
E           assert 27 == 28
E             -27
E             +28

evalml/tests/component_tests/test_utils.py:17: AssertionError</failure></testcase><testcase classname="evalml.tests.component_tests.test_utils" file="evalml/tests/component_tests/test_utils.py" line="19" name="test_handle_component_class_names" time="0.381"></testcase><testcase classname="evalml.tests.component_tests.test_xgboost_classifier" file="evalml/tests/component_tests/test_xgboost_classifier.py" line="10" name="test_xgboost_classifier_random_state_bounds_seed" time="0.014"></testcase><testcase classname="evalml.tests.component_tests.test_xgboost_classifier" file="evalml/tests/component_tests/test_xgboost_classifier.py" line="22" name="test_xgboost_classifier_random_state_bounds_rng" time="0.013"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostClassifier-Regression-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostClassifier-Binary Classification-1]" time="0.146"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="743" name="test_serialization_protocol" time="0.005"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="7" name="test_datetime_featurizer_init" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="18" name="test_datetime_featurizer_transform" time="0.015"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="35" name="test_datetime_featurizer_fit_transform" time="0.009"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="47" name="test_datetime_featurizer_no_col_names" time="0.012"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="54" name="test_datetime_featurizer_no_features_to_extract" time="0.005"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="62" name="test_datetime_featurizer_custom_features_to_extract" time="0.008"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="70" name="test_datetime_featurizer_no_datetime_cols" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_datetime_featurizer" file="evalml/tests/component_tests/test_datetime_featurizer.py" line="77" name="test_datetime_featurizer_numpy_array_input" time="0.012"></testcase><testcase classname="evalml.tests.component_tests.test_drop_null_columns_transformer" file="evalml/tests/component_tests/test_drop_null_columns_transformer.py" line="7" name="test_drop_null_transformer_init" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_drop_null_columns_transformer" file="evalml/tests/component_tests/test_drop_null_columns_transformer.py" line="27" name="test_drop_null_transformer_transform_default_pct_null_threshold" time="0.005"></testcase><testcase classname="evalml.tests.component_tests.test_drop_null_columns_transformer" file="evalml/tests/component_tests/test_drop_null_columns_transformer.py" line="35" name="test_drop_null_transformer_transform_custom_pct_null_threshold" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_drop_null_columns_transformer" file="evalml/tests/component_tests/test_drop_null_columns_transformer.py" line="49" name="test_drop_null_transformer_transform_boundary_pct_null_threshold" time="0.010"></testcase><testcase classname="evalml.tests.component_tests.test_drop_null_columns_transformer" file="evalml/tests/component_tests/test_drop_null_columns_transformer.py" line="66" name="test_drop_null_transformer_fit_transform" time="0.019"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostClassifier-Binary Classification-5]" time="0.117"></testcase><testcase classname="evalml.tests.component_tests.test_drop_null_columns_transformer" file="evalml/tests/component_tests/test_drop_null_columns_transformer.py" line="95" name="test_drop_null_transformer_np_array" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="10" name="test_model_family" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="14" name="test_en_parameters" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="25" name="test_problem_types" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="31" name="test_fit_predict_binary" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="53" name="test_fit_predict_multi" time="0.027"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="75" name="test_feature_importance" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_en_classifier" file="evalml/tests/component_tests/test_en_classifier.py" line="92" name="test_feature_importance_multi" time="0.024"></testcase><testcase classname="evalml.tests.component_tests.test_en_regressor" file="evalml/tests/component_tests/test_en_regressor.py" line="10" name="test_model_family" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_en_regressor" file="evalml/tests/component_tests/test_en_regressor.py" line="14" name="test_en_parameters" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_en_regressor" file="evalml/tests/component_tests/test_en_regressor.py" line="25" name="test_problem_types" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_en_regressor" file="evalml/tests/component_tests/test_en_regressor.py" line="30" name="test_fit_predict" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_en_regressor" file="evalml/tests/component_tests/test_en_regressor.py" line="48" name="test_feature_importance" time="0.004"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostClassifier-Multiclass Classification-1]" time="0.004"><skipped message="Skipping Catboost for multiclass problems." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:107: Skipping Catboost for multiclass problems.</skipped></testcase><testcase classname="evalml.tests.component_tests.test_estimators" file="evalml/tests/component_tests/test_estimators.py" line="9" name="test_estimators_feature_name_with_random_ascii" time="10.065"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostClassifier-Multiclass Classification-5]" time="0.004"><skipped message="Skipping Catboost for multiclass problems." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:107: Skipping Catboost for multiclass problems.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestClassifier-Regression-1]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestClassifier-Regression-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestClassifier-Binary Classification-1]" time="0.332"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestClassifier-Binary Classification-5]" time="0.326"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesClassifier-Regression-1]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesClassifier-Regression-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesClassifier-Binary Classification-1]" time="0.277"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestClassifier-Multiclass Classification-1]" time="0.335"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesClassifier-Binary Classification-5]" time="0.269"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[RandomForestClassifier-Multiclass Classification-5]" time="0.322"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesClassifier-Multiclass Classification-1]" time="0.273"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LogisticRegressionClassifier-Regression-1]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LogisticRegressionClassifier-Regression-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LogisticRegressionClassifier-Binary Classification-1]" time="3.318"><system-err>  0%|          | 0/1 [00:00&lt;?, ?it/s]100%|██████████| 1/1 [00:01&lt;00:00,  1.37s/it]100%|██████████| 1/1 [00:01&lt;00:00,  1.37s/it]
</system-err></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesClassifier-Multiclass Classification-5]" time="0.382"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetClassifier-Regression-1]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetClassifier-Regression-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetClassifier-Binary Classification-1]" time="1.655"><system-err>  0%|          | 0/1 [00:00&lt;?, ?it/s]100%|██████████| 1/1 [00:01&lt;00:00,  1.55s/it]100%|██████████| 1/1 [00:01&lt;00:00,  1.55s/it]
</system-err></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="149" name="test_log_metrics_only_passed_directly" time="0.002"><system-out>Using default limit of max_pipelines=5.

</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="158" name="test_automl_allowed_pipelines_no_allowed_pipelines" time="0.037"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="166" name="test_automl_allowed_pipelines_specified_allowed_pipelines" time="0.230"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="184" name="test_automl_allowed_pipelines_specified_allowed_model_families" time="0.644"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetClassifier-Binary Classification-5]" time="7.200"><system-err>  0%|          | 0/5 [00:00&lt;?, ?it/s] 20%|██        | 1/5 [00:01&lt;00:05,  1.34s/it] 40%|████      | 2/5 [00:03&lt;00:04,  1.51s/it] 60%|██████    | 3/5 [00:04&lt;00:02,  1.45s/it] 80%|████████  | 4/5 [00:05&lt;00:01,  1.42s/it]100%|██████████| 5/5 [00:07&lt;00:00,  1.36s/it]100%|██████████| 5/5 [00:07&lt;00:00,  1.43s/it]
</system-err></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="212" name="test_automl_allowed_pipelines_init_allowed_both_not_specified" time="0.570"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest, catboost, linear_model, extra_trees, xgboost

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) CatBoost Regressor w/ Imputer            Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LinearRegressor-Binary Classification-1]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LinearRegressor-Binary Classification-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LinearRegressor-Multiclass Classification-1]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LinearRegressor-Multiclass Classification-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetRegressor-Regression-1]" time="2.057"><system-err>  0%|          | 0/1 [00:00&lt;?, ?it/s]100%|██████████| 1/1 [00:01&lt;00:00,  1.99s/it]100%|██████████| 1/1 [00:01&lt;00:00,  1.99s/it]
</system-err></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="228" name="test_automl_allowed_pipelines_init_allowed_both_specified" time="0.325"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(3/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(4/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(5/5) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="27" name="test_explain_prediction_value_error[test_features4]" time="0.003"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="27" name="test_explain_prediction_value_error[test_features5]" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="72" name="test_explain_prediction[Regression-shap_values0-normalized_shap_values0-answer0]" time="0.009"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="72" name="test_explain_prediction[Binary Classification-shap_values1-normalized_shap_values1-answer1]" time="0.007"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="72" name="test_explain_prediction[Multiclass Classification-shap_values2-normalized_shap_values2-answer2]" time="0.010"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="106" name="test_error_metrics" time="0.005"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="121" name="test_explain_predictions_best_worst_value_errors[input_features0-None-^Input features must be a dataframe with more than 10 rows!]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="121" name="test_explain_predictions_best_worst_value_errors[input_features1-None-^Input features must be a dataframe with more than 10 rows!]" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="121" name="test_explain_predictions_best_worst_value_errors[input_features2-y_true2-^Parameter y_true must be a pd.Series.]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="121" name="test_explain_predictions_best_worst_value_errors[input_features3-y_true3-^Parameters y_true and input_features must have the same number of data points.]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="127" name="test_explain_predictions_raises_pipeline_score_error" time="0.006"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="139" name="test_explain_predictions_value_errors[1]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="139" name="test_explain_predictions_value_errors[input_features1]" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="139" name="test_explain_predictions_value_errors[foo]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_binary_classification_objective" file="evalml/tests/objective_tests/test_binary_classification_objective.py" line="30" name="test_decision_function" time="0.006"></testcase><testcase classname="evalml.tests.objective_tests.test_binary_classification_objective" file="evalml/tests/objective_tests/test_binary_classification_objective.py" line="43" name="test_decision_function_neg" time="0.004"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="8" name="test_cost_benefit_matrix_init" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="23" name="test_cost_benefit_matrix_objective[True]" time="3.217"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Cost Benefit Matrix. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Cost Benefit Matrix: -14.000
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Cost Benefit Matrix: 88.000

Search finished after 00:02            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Cost Benefit Matrix: 88.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="245" name="test_automl_allowed_pipelines_search" time="0.207"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: none

(1/2) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000
(2/2) Mock Regression Pipeline                 Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 1.000

Search finished after 00:00            
Best pipeline: Mean Baseline Regression Pipeline
Best pipeline R2: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_iterative_algorithm" file="evalml/tests/automl_tests/test_iterative_algorithm.py" line="13" name="test_iterative_algorithm_init_iterative" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_iterative_algorithm" file="evalml/tests/automl_tests/test_iterative_algorithm.py" line="17" name="test_iterative_algorithm_init" time="0.001"></testcase><testcase classname="evalml.tests.automl_tests.test_iterative_algorithm" file="evalml/tests/automl_tests/test_iterative_algorithm.py" line="24" name="test_iterative_algorithm_allowed_pipelines" time="0.060"></testcase><testcase classname="evalml.tests.automl_tests.test_iterative_algorithm" file="evalml/tests/automl_tests/test_iterative_algorithm.py" line="60" name="test_iterative_algorithm_empty" time="0.002"></testcase><testcase classname="evalml.tests.automl_tests.test_iterative_algorithm" file="evalml/tests/automl_tests/test_iterative_algorithm.py" line="77" name="test_iterative_algorithm_results" time="10.641"><system-out>[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;other&apos;}}]
[{&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}, {&apos;Mock Classifier&apos;: {&apos;dummy_parameter&apos;: &apos;default&apos;}}]
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetRegressor-Regression-5]" time="6.876"><system-err>  0%|          | 0/5 [00:00&lt;?, ?it/s] 20%|██        | 1/5 [00:01&lt;00:05,  1.41s/it] 40%|████      | 2/5 [00:02&lt;00:04,  1.42s/it] 60%|██████    | 3/5 [00:04&lt;00:02,  1.40s/it] 80%|████████  | 4/5 [00:05&lt;00:01,  1.35s/it]100%|██████████| 5/5 [00:06&lt;00:00,  1.35s/it]100%|██████████| 5/5 [00:06&lt;00:00,  1.36s/it]
</system-err></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="23" name="test_cost_benefit_matrix_objective[False]" time="1.233"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Cost Benefit Matrix. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Cost Benefit Matrix: -20.000
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Cost Benefit Matrix: 112.000

Search finished after 00:00            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline Cost Benefit Matrix: 112.000000
</system-out></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[BaselineRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[ExtraTreesRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[XGBoostRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[CatBoostRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[RandomForestRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[LinearRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[ElasticNetRegressor]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[LightGBMClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[BaselineClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[ExtraTreesClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[ElasticNetClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[CatBoostClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[XGBoostClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[RandomForestClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[LogisticRegressionClassifier]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[LSA]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[DropNullColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[DateTimeFeaturizer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[SelectColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[DropColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[StandardScaler]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[Imputer]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[PerColumnImputer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[SimpleImputer]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[RFRegressorSelectFromModel]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[RFClassifierSelectFromModel]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_components" file="evalml/tests/component_tests/test_components.py" line="504" name="test_default_parameters[OneHotEncoder]" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_lead_scoring" file="evalml/tests/objective_tests/test_lead_scoring.py" line="77" name="test_zero_input_lengths" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_lead_scoring" file="evalml/tests/objective_tests/test_lead_scoring.py" line="86" name="test_binary_more_than_two_unique_values" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_objectives" file="evalml/tests/objective_tests/test_objectives.py" line="17" name="test_create_custom_objective" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_objectives" file="evalml/tests/objective_tests/test_objectives.py" line="33" name="test_get_objective" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_objectives" file="evalml/tests/objective_tests/test_objectives.py" line="45" name="test_get_objectives_types" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_objectives" file="evalml/tests/objective_tests/test_objectives.py" line="52" name="test_objective_outputs" time="0.076"><system-out>Testing objective Root Mean Squared Error
Testing objective R2
Testing objective MAE
Testing objective MSE
Testing objective MedianAE
Testing objective MaxError
Testing objective ExpVariance
Testing objective Accuracy Binary
Testing objective Balanced Accuracy Binary
Testing objective F1
Testing objective Precision
Testing objective AUC
Testing objective Log Loss Binary
Testing objective MCC Binary
Testing objective Accuracy Multiclass
Testing objective Balanced Accuracy Multiclass
Testing objective F1 Micro
Testing objective F1 Macro
Testing objective F1 Weighted
Testing objective Precision Micro
Testing objective Precision Macro
Testing objective Precision Weighted
Testing objective AUC Micro
Testing objective AUC Macro
Testing objective AUC Weighted
Testing objective Log Loss Multiclass
Testing objective MCC Multiclass
</system-out></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="41" name="test_input_contains_nan" time="0.004"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="55" name="test_input_contains_inf" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="69" name="test_different_input_lengths" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="83" name="test_zero_input_lengths" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="91" name="test_probabilities_not_in_0_1_range" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="107" name="test_negative_with_log" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="115" name="test_binary_more_than_two_unique_values" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="131" name="test_accuracy_binary" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="141" name="test_accuracy_multi" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="155" name="test_balanced_accuracy_binary" time="0.004"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="167" name="test_balanced_accuracy_multi" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="179" name="test_f1_binary" time="0.006"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="194" name="test_f1_micro_multi" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="209" name="test_f1_macro_multi" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="225" name="test_f1_weighted_multi" time="0.006"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="241" name="test_precision_binary" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="256" name="test_precision_micro_multi" time="0.006"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="271" name="test_precision_macro_multi" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="286" name="test_precision_weighted_multi" time="0.006"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="301" name="test_recall_binary" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="313" name="test_recall_micro_multi" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="328" name="test_recall_macro_multi" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="343" name="test_recall_weighted_multi" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="358" name="test_log_linear_model" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="380" name="test_mse_linear_model" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="402" name="test_mcc_catches_warnings" time="0.005"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[ExpVariance]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MaxError]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MedianAE]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MSE]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MAE]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[R2]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MeanSquaredLogError]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[RootMeanSquaredLogError]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[RootMeanSquaredError]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MCCMulticlass]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[LogLossMulticlass]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[AUCWeighted]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[AUCMacro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[AUCMicro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[RecallWeighted]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[RecallMacro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[RecallMicro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[PrecisionWeighted]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[PrecisionMacro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[PrecisionMicro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[F1Weighted]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[F1Macro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[F1Micro]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[BalancedAccuracyMulticlass]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[AccuracyMulticlass]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[LeadScoring]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[FraudCost]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[CostBenefitMatrix]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[MCCBinary]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[LogLossBinary]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[AUC]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[Recall]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[Precision]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[F1]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[BalancedAccuracyBinary]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="414" name="test_calculate_percent_difference[AccuracyBinary]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[ExpVariance-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[ExpVariance-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MaxError-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MaxError-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MedianAE-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MedianAE-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MSE-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MSE-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MAE-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MAE-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[R2-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[R2-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MeanSquaredLogError-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MeanSquaredLogError-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RootMeanSquaredLogError-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RootMeanSquaredLogError-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RootMeanSquaredError-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RootMeanSquaredError-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MCCMulticlass-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MCCMulticlass-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[LogLossMulticlass-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[LogLossMulticlass-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUCWeighted-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUCWeighted-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUCMacro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUCMacro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUCMicro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUCMicro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RecallWeighted-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RecallWeighted-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RecallMacro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RecallMacro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RecallMicro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[RecallMicro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[PrecisionWeighted-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[PrecisionWeighted-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[PrecisionMacro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[PrecisionMacro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[PrecisionMicro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[PrecisionMicro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1Weighted-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1Weighted-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1Macro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1Macro-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1Micro-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1Micro-nan]" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[BalancedAccuracyMulticlass-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[BalancedAccuracyMulticlass-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AccuracyMulticlass-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AccuracyMulticlass-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[LeadScoring-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[LeadScoring-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[FraudCost-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[FraudCost-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[CostBenefitMatrix-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[CostBenefitMatrix-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MCCBinary-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[MCCBinary-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[LogLossBinary-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[LogLossBinary-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUC-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AUC-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[Recall-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[Recall-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[Precision-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[Precision-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[F1-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[BalancedAccuracyBinary-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[BalancedAccuracyBinary-nan]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AccuracyBinary-None]" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_standard_metrics" file="evalml/tests/objective_tests/test_standard_metrics.py" line="426" name="test_calculate_percent_difference_with_nan[AccuracyBinary-nan]" time="0.001"></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="37" name="test_backend" time="0.057"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="39" name="test_cbm_objective_function" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="47" name="test_cbm_objective_function_floats" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="55" name="test_cmb_input_contains_nan" time="0.004"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="69" name="test_input_contains_inf" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="83" name="test_different_input_lengths" time="0.002"></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="45" name="test_returns_digraph_object" time="0.134"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="97" name="test_zero_input_lengths" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_cost_benefit_matrix" file="evalml/tests/objective_tests/test_cost_benefit_matrix.py" line="106" name="test_binary_more_than_two_unique_values" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="8" name="test_fraud_objective" time="0.472"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Fraud Cost. 
Lower score is better.

Searching up to 1 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Fraud Cost: 0.822

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Fraud Cost: 0.821764
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="51" name="test_saving_png_file" time="0.503"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="155" name="test_random_state" time="4.592"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.162
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.875
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.939
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Precision: 0.883
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Precision: 0.887

Search finished after 00:02            
Best pipeline: Extra Trees Classifier w/ Imputer
Best pipeline Precision: 0.938562
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.162
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.875
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.939
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Precision: 0.883
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Precision: 0.887

Search finished after 00:02            
Best pipeline: Extra Trees Classifier w/ Imputer
Best pipeline Precision: 0.938562
</system-out></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="26" name="test_fraud_objective_function_amount_col" time="0.003"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="39" name="test_input_contains_nan" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="52" name="test_input_contains_inf" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="65" name="test_different_input_lengths" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="78" name="test_zero_input_lengths" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="86" name="test_binary_more_than_two_unique_values" time="0.001"></testcase><testcase classname="evalml.tests.objective_tests.test_fraud_detection" file="evalml/tests/objective_tests/test_fraud_detection.py" line="99" name="test_fraud_objective_score" time="0.016"></testcase><testcase classname="evalml.tests.objective_tests.test_lead_scoring" file="evalml/tests/objective_tests/test_lead_scoring.py" line="8" name="test_lead_scoring_objective" time="0.363"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Lead Scoring. 
Greater score is better.

Searching up to 1 pipelines. 
Allowed model families: catboost, linear_model, extra_trees, random_forest, xgboost, lightgbm

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Lead Scoring: -0.010

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Lead Scoring: -0.010101
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="58" name="test_missing_file_extension" time="0.062"></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="65" name="test_invalid_format" time="0.062"></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="72" name="test_invalid_path" time="0.081"></testcase><testcase classname="evalml.tests.component_tests.test_estimators" file="evalml/tests/component_tests/test_estimators.py" line="33" name="test_binary_classification_estimators_predict_proba_col_order" time="0.976"></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="81" name="test_graph_feature_importance" time="0.142"></testcase><testcase classname="evalml.tests.objective_tests.test_lead_scoring" file="evalml/tests/objective_tests/test_lead_scoring.py" line="35" name="test_input_contains_nan" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_lead_scoring" file="evalml/tests/objective_tests/test_lead_scoring.py" line="49" name="test_input_contains_inf" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_lead_scoring" file="evalml/tests/objective_tests/test_lead_scoring.py" line="63" name="test_different_input_lengths" time="0.001"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="72" name="test_get_estimators" time="0.105"></testcase><testcase classname="evalml.tests.pipeline_tests.test_graphs" file="evalml/tests/pipeline_tests/test_graphs.py" line="89" name="test_graph_feature_importance_show_all_features" time="0.771"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="96" name="test_make_pipeline_all_nan_no_categoricals" time="0.045"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="110" name="test_make_pipeline" time="0.187"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="152" name="test_make_pipeline_no_nulls" time="0.072"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="174" name="test_make_pipeline_no_datetimes" time="0.071"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="195" name="test_make_pipeline_no_column_names" time="0.071"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="214" name="test_make_pipeline_numpy_input" time="0.070"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetClassifier-Multiclass Classification-1]" time="1.239"><system-err>  0%|          | 0/1 [00:00&lt;?, ?it/s]100%|██████████| 1/1 [00:01&lt;00:00,  1.16s/it]100%|██████████| 1/1 [00:01&lt;00:00,  1.16s/it]
</system-err></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="325" name="test_indexing" time="0.724"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="51" name="test_allowed_model_families" time="0.015"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="65" name="test_all_estimators" time="0.007"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="233" name="test_make_pipeline_problem_type_mismatch" time="0.045"></testcase><testcase classname="evalml.tests.component_tests.test_et_classifier" file="evalml/tests/component_tests/test_et_classifier.py" line="8" name="test_model_family" time="0.001"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="242" name="test_required_fields" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LogisticRegressionClassifier-Binary Classification-5]" time="6.597"><system-err>  0%|          | 0/5 [00:00&lt;?, ?it/s] 20%|██        | 1/5 [00:01&lt;00:04,  1.07s/it] 40%|████      | 2/5 [00:02&lt;00:03,  1.15s/it] 60%|██████    | 3/5 [00:03&lt;00:02,  1.18s/it] 80%|████████  | 4/5 [00:04&lt;00:01,  1.21s/it]100%|██████████| 5/5 [00:06&lt;00:00,  1.33s/it]100%|██████████| 5/5 [00:06&lt;00:00,  1.31s/it]
</system-err></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="250" name="test_serialization" time="0.644"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="342" name="test_describe" time="0.049"><system-out>***************************************
* Logistic Regression Binary Pipeline *
***************************************

Problem Type: Binary Classification
Model Family: Linear

Pipeline Steps
==============
1. Imputer
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
2. One Hot Encoder
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
3. Standard Scaler
4. Logistic Regression Classifier
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="358" name="test_describe_fitted" time="0.106"><system-out>***************************************
* Logistic Regression Binary Pipeline *
***************************************

Problem Type: Binary Classification
Model Family: Linear
Number of features: 20

Pipeline Steps
==============
1. Imputer
	 * categorical_impute_strategy : most_frequent
	 * numeric_impute_strategy : mean
	 * categorical_fill_value : None
	 * numeric_fill_value : None
2. One Hot Encoder
	 * top_n : 10
	 * categories : None
	 * drop : None
	 * handle_unknown : ignore
	 * handle_missing : error
3. Standard Scaler
4. Logistic Regression Classifier
	 * penalty : l2
	 * C : 1.0
	 * n_jobs : -1
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="376" name="test_parameters" time="0.043"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="259" name="test_serialization_protocol" time="0.039"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="411" name="test_name" time="0.011"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="431" name="test_estimator_not_last" time="0.050"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="441" name="test_multi_format_creation" time="0.755"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="285" name="test_load_pickled_pipeline_with_custom_objective" time="0.287"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetClassifier-Multiclass Classification-5]" time="6.908"><system-err>  0%|          | 0/5 [00:00&lt;?, ?it/s] 20%|██        | 1/5 [00:01&lt;00:05,  1.28s/it] 40%|████      | 2/5 [00:02&lt;00:03,  1.29s/it] 60%|██████    | 3/5 [00:03&lt;00:02,  1.29s/it] 80%|████████  | 4/5 [00:05&lt;00:01,  1.39s/it]100%|██████████| 5/5 [00:06&lt;00:00,  1.37s/it]100%|██████████| 5/5 [00:06&lt;00:00,  1.37s/it]
</system-err></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="296" name="test_reproducibility" time="0.952"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="480" name="test_multiple_feature_selectors" time="0.895"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="597" name="test_score_binary_list" time="0.021"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="614" name="test_score_multi_list" time="0.021"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="629" name="test_score_regression_objective_error" time="0.019"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="650" name="test_score_binary_objective_error" time="0.018"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="672" name="test_score_multiclass_objective_error" time="0.015"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="695" name="test_no_default_parameters" time="0.010"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="716" name="test_init_components_invalid_parameters" time="0.018"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="730" name="test_correct_parameters" time="0.035"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="748" name="test_hyperparameters" time="0.053"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="767" name="test_hyperparameters_override" time="0.056"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="797" name="test_hyperparameters_none" time="0.002"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="807" name="test_score_with_objective_that_requires_predict_proba" time="0.005"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="826" name="test_score_auc" time="0.166"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetRegressor-Binary Classification-1]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetRegressor-Binary Classification-5]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetRegressor-Multiclass Classification-1]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ElasticNetRegressor-Multiclass Classification-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LightGBMClassifier-Regression-1]" time="0.005"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LightGBMClassifier-Regression-5]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LightGBMClassifier-Binary Classification-1]" time="0.521"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="833" name="test_pipeline_summary" time="0.094"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="508" name="test_problem_types" time="0.017"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="537" name="test_score_regression_single" time="0.019"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="550" name="test_score_binary_single" time="0.020"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="567" name="test_score_multiclass_single" time="0.020"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="584" name="test_score_regression_list" time="0.018"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="855" name="test_drop_columns_in_pipeline" time="0.690"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="933" name="test_feature_importance_has_feature_names" time="0.738"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LightGBMClassifier-Binary Classification-5]" time="0.520"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="880" name="test_clone_init" time="0.101"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="166" name="test_callback" time="2.997"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.162
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 0.875
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean Precision: 0.939

Search finished after 00:02            
Best pipeline: Extra Trees Classifier w/ Imputer
Best pipeline Precision: 0.938562
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="960" name="test_component_not_found" time="0.041"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="967" name="test_get_default_parameters" time="0.037"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="896" name="test_clone_random_state" time="0.174"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[int16-Binary Classification]" time="6.542"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case9-True-False]" time="0.005"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case10-False-True]" time="0.005"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case11-False-False]" time="0.004"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="208" name="test_make_single_prediction_table[values0-normalized_values0-pipeline_features0-False-answer0]" time="0.004"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="208" name="test_make_single_prediction_table[values1-normalized_values1-pipeline_features1-True-answer1]" time="0.004"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="208" name="test_make_single_prediction_table[values2-normalized_values2-pipeline_features2-False-answer2]" time="0.003"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="208" name="test_make_single_prediction_table[values3-normalized_values3-pipeline_features3-True-answer3]" time="0.003"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="208" name="test_make_single_prediction_table[values4-normalized_values4-pipeline_features4-False-answer4]" time="0.006"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="208" name="test_make_single_prediction_table[values5-normalized_values5-pipeline_features5-True-answer5]" time="0.007"></testcase><testcase classname="evalml.tests.objective_tests.test_binary_classification_objective" file="evalml/tests/objective_tests/test_binary_classification_objective.py" line="7" name="test_optimize_threshold" time="0.084"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="916" name="test_clone_fitted" time="0.344"></testcase><testcase classname="evalml.tests.objective_tests.test_binary_classification_objective" file="evalml/tests/objective_tests/test_binary_classification_objective.py" line="16" name="test_optimize_threshold_neg" time="0.002"></testcase><testcase classname="evalml.tests.objective_tests.test_binary_classification_objective" file="evalml/tests/objective_tests/test_binary_classification_objective.py" line="25" name="test_can_optimize_threshold" time="0.001"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[bool-Multiclass Classification]" time="0.010"><skipped message="Skipping test where problem type is multiclass but target type is boolean" type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/pipeline_tests/test_pipelines.py:1003: Skipping test where problem type is multiclass but target type is boolean</skipped></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[object-Binary Classification]" time="8.913"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[float16-Multiclass Classification]" time="8.215"></testcase><testcase classname="evalml.tests.automl_tests.test_pipeline_search_plots" file="evalml/tests/automl_tests/test_pipeline_search_plots.py" line="6" name="test_search_iteration_plot_class" time="0.043"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="9" name="test_baseline_init" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="16" name="test_baseline_invalid_strategy" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="21" name="test_baseline_y_is_None" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="27" name="test_baseline_binary_mode" time="0.008"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="41" name="test_baseline_binary_random" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="54" name="test_baseline_binary_random_weighted" time="0.005"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="69" name="test_baseline_multiclass_mode" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="83" name="test_baseline_multiclass_random" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="96" name="test_baseline_multiclass_random_weighted" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_classifier" file="evalml/tests/component_tests/test_baseline_classifier.py" line="111" name="test_baseline_no_mode" time="0.004"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_regressor" file="evalml/tests/component_tests/test_baseline_regressor.py" line="7" name="test_baseline_init" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_regressor" file="evalml/tests/component_tests/test_baseline_regressor.py" line="13" name="test_baseline_invalid_strategy" time="0.001"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_regressor" file="evalml/tests/component_tests/test_baseline_regressor.py" line="18" name="test_baseline_y_is_None" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_regressor" file="evalml/tests/component_tests/test_baseline_regressor.py" line="24" name="test_baseline_mean" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_baseline_regressor" file="evalml/tests/component_tests/test_baseline_regressor.py" line="33" name="test_baseline_median" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_catboost_classifier" file="evalml/tests/component_tests/test_catboost_classifier.py" line="10" name="test_catboost_classifier_random_state_bounds_seed" time="0.053"></testcase><testcase classname="evalml.tests.component_tests.test_catboost_classifier" file="evalml/tests/component_tests/test_catboost_classifier.py" line="22" name="test_catboost_classifier_random_state_bounds_rng" time="0.055"></testcase><testcase classname="evalml.tests.component_tests.test_catboost_regressor" file="evalml/tests/component_tests/test_catboost_regressor.py" line="10" name="test_catboost_regressor_random_state_bounds_seed" time="0.053"></testcase><testcase classname="evalml.tests.component_tests.test_catboost_regressor" file="evalml/tests/component_tests/test_catboost_regressor.py" line="22" name="test_catboost_regressor_random_state_bounds_rng" time="0.055"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="7" name="test_column_transformer_init[DropColumns]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="7" name="test_column_transformer_init[SelectColumns]" time="0.002"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="22" name="test_column_transformer_empty_X[DropColumns]" time="0.005"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="22" name="test_column_transformer_empty_X[SelectColumns]" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="39" name="test_column_transformer_transform[DropColumns-checking_functions0]" time="0.008"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="39" name="test_column_transformer_transform[SelectColumns-checking_functions1]" time="0.008"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="66" name="test_column_transformer_fit_transform[DropColumns-checking_functions0]" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="66" name="test_column_transformer_fit_transform[SelectColumns-checking_functions1]" time="0.007"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="85" name="test_drop_column_transformer_input_invalid_col_name[DropColumns]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="85" name="test_drop_column_transformer_input_invalid_col_name[SelectColumns]" time="0.003"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="106" name="test_column_transformer_numpy[DropColumns-answers0]" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="106" name="test_column_transformer_numpy[SelectColumns-answers1]" time="0.006"></testcase><testcase classname="evalml.tests.component_tests.test_column_selector_transformers" file="evalml/tests/component_tests/test_column_selector_transformers.py" line="128" name="test_column_transformer_int_col_names[DropColumns-answers0]" time="0.004"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="1026" name="test_pipeline_not_fitted_error[Binary Classification]" time="2.002"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="190" name="test_additional_objectives" time="1.778"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.218
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.874

Search finished after 00:01            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline F1: 0.874437
************************************************
* Mode Baseline Binary Classification Pipeline *
************************************************

Problem Type: Binary Classification
Model Family: Baseline

Pipeline Steps
==============
1. Baseline Classifier
	 * strategy : mode

Training
========
Training for Binary Classification problems.
Total training time (including CV): 0.1 seconds

Cross Validation
----------------
High variance within cross validation scores. Model may not perform as estimated on unseen data.
               F1  Fraud Cost # Training # Testing
0           0.000       2.486     66.000    34.000
1           0.653      -0.021     67.000    33.000
2           0.000      -0.000     67.000    33.000
mean        0.218       0.822          -         -
std         0.377       1.441          -         -
coef of var 1.732       1.754          -         -
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LogisticRegressionClassifier-Multiclass Classification-1]" time="2.527"><system-err>  0%|          | 0/1 [00:00&lt;?, ?it/s]100%|██████████| 1/1 [00:01&lt;00:00,  1.86s/it]100%|██████████| 1/1 [00:01&lt;00:00,  1.86s/it]
</system-err></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="1026" name="test_pipeline_not_fitted_error[Multiclass Classification]" time="0.740"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[CatBoostClassifier-Regression-1]" time="0.004"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="139" name="test_explain_predictions_value_errors[input_features3]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="269" name="test_explain_predictions_best_worst_and_explain_predictions[Regression-Test Pipeline Name\n\n        Parameters go here\n\n            Best 1 of 1\n\n                Predicted Value: 1\n                Target Value: 2\n                Absolute Difference: 1\n\n                table goes here\n\n\n            Worst 1 of 1\n\n                Predicted Value: 2\n                Target Value: 3\n                Absolute Difference: 4\n\n                table goes here\n\n\n-Test Pipeline Name\n\n        Parameters go here\n\n            1 of 2\n\n                table goes here\n\n\n            2 of 2\n\n                table goes here\n\n\n]" time="0.008"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="269" name="test_explain_predictions_best_worst_and_explain_predictions[Binary Classification-Test Pipeline Name\n\n        Parameters go here\n\n            Best 1 of 1\n\n                Predicted Probabilities: [benign: 0.05, malignant: 0.95]\n                Predicted Value: malignant\n                Target Value: malignant\n                Cross Entropy: 0.2\n\n                table goes here\n\n\n            Worst 1 of 1\n\n                Predicted Probabilities: [benign: 0.1, malignant: 0.9]\n                Predicted Value: malignant\n                Target Value: benign\n                Cross Entropy: 0.78\n\n                table goes here\n\n\n-Test Pipeline Name\n\n        Parameters go here\n\n            1 of 2\n\n                table goes here\n\n\n            2 of 2\n\n                table goes here\n\n\n]" time="0.011"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="269" name="test_explain_predictions_best_worst_and_explain_predictions[Multiclass Classification-Test Pipeline Name\n\n        Parameters go here\n\n            Best 1 of 1\n\n                Predicted Probabilities: [setosa: 0.8, versicolor: 0.1, virginica: 0.1]\n                Predicted Value: setosa\n                Target Value: setosa\n                Cross Entropy: 0.15\n\n                Class: setosa\n\n        table goes here\n\n\n        Class: versicolor\n\n        table goes here\n\n\n        Class: virginica\n\n        table goes here\n\n\n            Worst 1 of 1\n\n                Predicted Probabilities: [setosa: 0.2, versicolor: 0.75, virginica: 0.05]\n                Predicted Value: versicolor\n                Target Value: versicolor\n                Cross Entropy: 0.34\n\n                Class: setosa\n\n        table goes here\n\n\n        Class: versicolor\n\n        table goes here\n\n\n        Class: virginica\n\n        table goes here\n\n\n-Test Pipeline Name\n\n    Parameters go here\n\n        1 of 2\n\n            Class: setosa\n\n        table goes here\n\n\n        Class: versicolor\n\n        table goes here\n\n\n        Class: virginica\n\n        table goes here\n\n\n        2 of 2\n\n            Class: setosa\n\n        table goes here\n\n\n        Class: versicolor\n\n        table goes here\n\n\n        Class: virginica\n\n        table goes here\n\n\n]" time="0.103"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="1026" name="test_pipeline_not_fitted_error[Regression]" time="0.124"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="319" name="test_explain_predictions_custom_index[Regression-Test Pipeline Name\n\n        Parameters go here\n\n            1 of 2\n\n                table goes here\n\n\n            2 of 2\n\n                table goes here\n\n\n]" time="0.005"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="319" name="test_explain_predictions_custom_index[Binary Classification-Test Pipeline Name\n\n        Parameters go here\n\n            1 of 2\n\n                table goes here\n\n\n            2 of 2\n\n                table goes here\n\n\n]" time="0.007"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="319" name="test_explain_predictions_custom_index[Multiclass Classification-Test Pipeline Name\n\n    Parameters go here\n\n        1 of 2\n\n            Class: setosa\n\n        table goes here\n\n\n        Class: versicolor\n\n        table goes here\n\n\n        Class: virginica\n\n        table goes here\n\n\n        2 of 2\n\n            Class: setosa\n\n        table goes here\n\n\n        Class: versicolor\n\n        table goes here\n\n\n        Class: virginica\n\n        table goes here\n\n\n]" time="0.008"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="204" name="test_optimizable_threshold_enabled" time="0.774"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Precision: 1.000000
************************************************
* Mode Baseline Binary Classification Pipeline *
************************************************

Problem Type: Binary Classification
Model Family: Baseline

Pipeline Steps
==============
1. Baseline Classifier
	 * strategy : mode

Training
========
Training for Binary Classification problems.
Objective to optimize binary classification pipeline thresholds for: &lt;evalml.objectives.standard_metrics.Precision object at 0x13b762340&gt;
Total training time (including CV): 0.2 seconds

Cross Validation
----------------
             Precision # Training # Testing
0                1.000     52.000    34.000
1                1.000     53.000    33.000
2                1.000     53.000    33.000
mean             1.000          -         -
std              0.000          -         -
coef of var      0.000          -         -
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="376" name="test_explain_predictions_best_worst_custom_metric" time="0.006"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case0-True-True]" time="0.007"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case1-True-False]" time="0.004"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_baseline_classification.py" line="7" name="test_baseline_binary_random" time="0.021"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case2-False-True]" time="0.005"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case3-False-False]" time="0.003"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case4-True-True]" time="0.006"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_baseline_classification.py" line="25" name="test_baseline_binary_random_weighted" time="0.021"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case5-True-False]" time="0.006"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case6-False-True]" time="0.006"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case7-False-False]" time="0.005"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_baseline_classification.py" line="46" name="test_baseline_binary_mode" time="0.021"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_user_interface" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_user_interface.py" line="25" name="test_make_rows_and_make_table[test_case8-True-True]" time="0.005"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_binary_classification.py" line="61" name="test_binary_predict_pipeline_objective_mismatch" time="0.007"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_baseline_classification.py" line="64" name="test_baseline_multi_random" time="0.019"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_classification.py" line="8" name="test_new_unique_targets_in_score[binary]" time="2.187"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_baseline_classification.py" line="82" name="test_baseline_multi_random_weighted" time="0.019"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_baseline_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_baseline_classification.py" line="103" name="test_baseline_multi_mode" time="0.022"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_binary_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_binary_classification.py" line="6" name="test_binary_classification_pipeline_predict" time="0.011"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_classification.py" line="24" name="test_pipeline_has_classes_property[binary-False]" time="0.254"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_classification.py" line="24" name="test_pipeline_has_classes_property[multi-True]" time="1.500"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="228" name="test_optimizable_threshold_disabled" time="0.735"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Precision. 
Greater score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Precision: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Precision: 1.000000
</system-out></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[LogisticRegressionClassifier-Multiclass Classification-5]" time="8.155"><system-err>  0%|          | 0/5 [00:00&lt;?, ?it/s] 20%|██        | 1/5 [00:01&lt;00:07,  1.90s/it] 40%|████      | 2/5 [00:03&lt;00:05,  1.73s/it] 60%|██████    | 3/5 [00:04&lt;00:03,  1.61s/it] 80%|████████  | 4/5 [00:05&lt;00:01,  1.52s/it]100%|██████████| 5/5 [00:07&lt;00:00,  1.44s/it]100%|██████████| 5/5 [00:07&lt;00:00,  1.43s/it]
</system-err></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="248" name="test_non_optimizable_threshold" time="0.441"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 1 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/1) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline AUC: 1.000000
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[int16-Multiclass Classification]" time="6.205"></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_classification.py" line="24" name="test_pipeline_has_classes_property[multi-False]" time="1.225"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="263" name="test_describe_pipeline_objective_ordered" time="2.948"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for AUC. 
Greater score is better.

Searching up to 2 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.500
(2/2) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean AUC: 0.931

Search finished after 00:02            
Best pipeline: LightGBM Classifier w/ Imputer
Best pipeline AUC: 0.930724
************************************************
* Mode Baseline Binary Classification Pipeline *
************************************************

Problem Type: Binary Classification
Model Family: Baseline

Pipeline Steps
==============
1. Baseline Classifier
	 * strategy : mode

Training
========
Training for Binary Classification problems.
Total training time (including CV): 0.1 seconds

Cross Validation
----------------
              AUC  Accuracy Binary  Balanced Accuracy Binary    F1  Precision  Log Loss Binary  MCC Binary # Training # Testing
0           0.500            0.500                     0.500 0.000      0.000           17.269       0.000     66.000    34.000
1           0.500            0.485                     0.500 0.653      0.485           17.793       0.000     67.000    33.000
2           0.500            0.485                     0.500 0.000      0.000           17.793       0.000     67.000    33.000
mean        0.500            0.490                     0.500 0.218      0.162           17.618       0.000          -         -
std         0.000            0.009                     0.000 0.377      0.280            0.302       0.000          -         -
coef of var 0.000            0.018                     0.000 1.732      1.732            0.017         inf          -         -
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_classification.py" line="8" name="test_new_unique_targets_in_score[multi]" time="1.551"></testcase><testcase classname="evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression" file="evalml/tests/pipeline_tests/regression_pipeline_tests/test_baseline_regression.py" line="5" name="test_baseline_mean" time="0.024"></testcase><testcase classname="evalml.tests.pipeline_tests.regression_pipeline_tests.test_baseline_regression" file="evalml/tests/pipeline_tests/regression_pipeline_tests/test_baseline_regression.py" line="19" name="test_baseline_median" time="0.023"></testcase><testcase classname="evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression" file="evalml/tests/pipeline_tests/regression_pipeline_tests/test_regression.py" line="6" name="test_invalid_targets_regression_pipeline[categorical]" time="0.011"></testcase><testcase classname="evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression" file="evalml/tests/pipeline_tests/regression_pipeline_tests/test_regression.py" line="6" name="test_invalid_targets_regression_pipeline[string]" time="0.008"></testcase><testcase classname="evalml.tests.pipeline_tests.regression_pipeline_tests.test_regression" file="evalml/tests/pipeline_tests/regression_pipeline_tests/test_regression.py" line="6" name="test_invalid_targets_regression_pipeline[bool]" time="0.029"></testcase><testcase classname="evalml.tests.preprocessing_tests.test_drop_na_rows" file="evalml/tests/preprocessing_tests/test_drop_na_rows.py" line="19" name="test_drop_nan_target_rows" time="0.014"></testcase><testcase classname="evalml.tests.preprocessing_tests.test_drop_na_rows" file="evalml/tests/preprocessing_tests/test_drop_na_rows.py" line="28" name="test_with_numpy_input" time="0.013"></testcase><testcase classname="evalml.tests.preprocessing_tests.test_split_data" file="evalml/tests/preprocessing_tests/test_split_data.py" line="3" name="test_split_regression" time="0.005"></testcase><testcase classname="evalml.tests.preprocessing_tests.test_split_data" file="evalml/tests/preprocessing_tests/test_split_data.py" line="15" name="test_split_classification" time="0.005"></testcase><testcase classname="evalml.tests.problem_type_tests.test_problem_types" file="evalml/tests/problem_type_tests/test_problem_types.py" line="11" name="test_handle_string" time="0.003"></testcase><testcase classname="evalml.tests.problem_type_tests.test_problem_types" file="evalml/tests/problem_type_tests/test_problem_types.py" line="22" name="test_handle_problem_types" time="0.001"></testcase><testcase classname="evalml.tests.problem_type_tests.test_problem_types" file="evalml/tests/problem_type_tests/test_problem_types.py" line="27" name="test_handle_incorrect_type" time="0.002"></testcase><testcase classname="evalml.tests.tuner_tests.test_grid_search_tuner" file="evalml/tests/tuner_tests/test_grid_search_tuner.py" line="6" name="test_grid_search_tuner_inheritance" time="0.002"></testcase><testcase classname="evalml.tests.tuner_tests.test_grid_search_tuner" file="evalml/tests/tuner_tests/test_grid_search_tuner.py" line="10" name="test_grid_search_tuner_unique_values" time="0.007"></testcase><testcase classname="evalml.tests.tuner_tests.test_grid_search_tuner" file="evalml/tests/tuner_tests/test_grid_search_tuner.py" line="22" name="test_grid_search_tuner_no_params" time="0.002"></testcase><testcase classname="evalml.tests.tuner_tests.test_grid_search_tuner" file="evalml/tests/tuner_tests/test_grid_search_tuner.py" line="30" name="test_grid_search_tuner_basic" time="0.009"></testcase><testcase classname="evalml.tests.tuner_tests.test_grid_search_tuner" file="evalml/tests/tuner_tests/test_grid_search_tuner.py" line="57" name="test_grid_search_tuner_space_types" time="0.002"></testcase><testcase classname="evalml.tests.tuner_tests.test_grid_search_tuner" file="evalml/tests/tuner_tests/test_grid_search_tuner.py" line="67" name="test_grid_search_tuner_invalid_space" time="0.003"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="9" name="test_random_search_tuner_inheritance" time="0.001"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="13" name="test_random_search_tuner_unique_values" time="0.018"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="25" name="test_random_search_tuner_no_params" time="0.032"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="33" name="test_random_search_tuner_with_replacement" time="0.019"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="42" name="test_random_search_tuner_basic" time="0.016"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="69" name="test_random_search_tuner_space_types" time="0.007"></testcase><testcase classname="evalml.tests.tuner_tests.test_random_search_tuner" file="evalml/tests/tuner_tests/test_random_search_tuner.py" line="79" name="test_random_search_tuner_invalid_space" time="0.006"></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="14" name="test_tuner_init" time="0.004"></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="19" name="test_skopt_tuner_init" time="0.007"></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="34" name="test_skopt_tuner_is_search_space_exhausted" time="0.004"></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="39" name="test_skopt_tuner_basic" time="0.014"></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="67" name="test_skopt_tuner_invalid_ranges" time="0.018"></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="94" name="test_skopt_tuner_invalid_parameters_score" time="0.015"><system-out>Invalid parameters specified to SKOptTuner.add: parameters {&apos;Mock Classifier&apos;: {&apos;param a&apos;: None, &apos;param b&apos;: 0.0, &apos;param c&apos;: &apos;option a&apos;}} error &apos;&lt;=&apos; not supported between instances of &apos;int&apos; and &apos;NoneType&apos;
0
</system-out></testcase><testcase classname="evalml.tests.tuner_tests.test_skopt_tuner" file="evalml/tests/tuner_tests/test_skopt_tuner.py" line="134" name="test_skopt_tuner_propose" time="0.009"><system-out>0
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="23" name="test_get_core_requirements" time="0.025"></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="27" name="test_print_cli_cmd" time="0.011"></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="34" name="test_print_cli_info_cmd" time="0.036"><system-out>EvalML version: 0.12.2
EvalML installation directory: /Users/bryan.chen/Documents/featurelabs/evalml/evalml

SYSTEM INFO
-----------
python: 3.8.0.final.0
python-bits: 64
OS: Darwin
OS-release: 19.4.0
machine: x86_64
processor: i386
byteorder: little
LC_ALL: None
LANG: en_US.UTF-8
LOCALE: en_US.UTF-8
# of CPUS: 16
Available memory: 12.8G

INSTALLED VERSIONS
------------------
numpy: 1.19.1
pandas: 1.1.0
scipy: 1.5.2
scikit-learn: 0.22.2.post1
scikit-optimize: 0.7.4
tqdm: 4.48.2
colorama: 0.4.3
cloudpickle: 1.5.0
click: 7.1.2
psutil: 5.7.2
requirements-parser: 0.2.0
shap: 0.35.0
texttable: 1.6.2
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="44" name="test_print_info" time="0.121"><system-out>EvalML version: 0.12.2
EvalML installation directory: /Users/bryan.chen/Documents/featurelabs/evalml/evalml

SYSTEM INFO
-----------
python: 3.8.0.final.0
python-bits: 64
OS: Darwin
OS-release: 19.4.0
machine: x86_64
processor: i386
byteorder: little
LC_ALL: None
LANG: en_US.UTF-8
LOCALE: en_US.UTF-8
# of CPUS: 16
Available memory: 12.8G

INSTALLED VERSIONS
------------------
numpy: 1.19.1
pandas: 1.1.0
scipy: 1.5.2
scikit-learn: 0.22.2.post1
scikit-optimize: 0.7.4
tqdm: 4.48.2
colorama: 0.4.3
cloudpickle: 1.5.0
click: 7.1.2
psutil: 5.7.2
requirements-parser: 0.2.0
shap: 0.35.0
texttable: 1.6.2
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="53" name="test_print_sys_info" time="0.004"><system-out>
SYSTEM INFO
-----------
python: 3.8.0.final.0
python-bits: 64
OS: Darwin
OS-release: 19.4.0
machine: x86_64
processor: i386
byteorder: little
LC_ALL: None
LANG: en_US.UTF-8
LOCALE: en_US.UTF-8
# of CPUS: 16
Available memory: 12.8G
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="59" name="test_print_deps_info" time="0.015"><system-out>
INSTALLED VERSIONS
------------------
numpy: 1.19.1
pandas: 1.1.0
scipy: 1.5.2
scikit-learn: 0.22.2.post1
scikit-optimize: 0.7.4
tqdm: 4.48.2
colorama: 0.4.3
cloudpickle: 1.5.0
click: 7.1.2
psutil: 5.7.2
requirements-parser: 0.2.0
shap: 0.35.0
texttable: 1.6.2
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.classification_pipeline_tests.test_classification" file="evalml/tests/pipeline_tests/classification_pipeline_tests/test_classification.py" line="24" name="test_pipeline_has_classes_property[binary-True]" time="0.882"></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="68" name="test_sys_info" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="78" name="test_sys_info_error" time="0.003"></testcase><testcase classname="evalml.tests.utils_tests.test_dependencies" file="evalml/tests/utils_tests/test_dependencies.py" line="6" name="test_has_minimal_deps" time="0.007"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="18" name="test_import_or_raise_errors" time="0.005"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="36" name="test_import_or_raise_imports" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="41" name="test_convert_to_seconds" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="61" name="test_get_random_state_int" time="0.004"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="75" name="test_get_random_seed_rng" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="97" name="test_get_random_seed_int" time="0.010"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="157" name="test_class_property" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_gen_utils" file="evalml/tests/utils_tests/test_gen_utils.py" line="168" name="test_get_importable_subclasses_wont_get_custom_classes" time="0.014"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="43" name="test_confusion_matrix[np]" time="0.011"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="43" name="test_confusion_matrix[pd]" time="0.010"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="70" name="test_normalize_confusion_matrix[np]" time="0.012"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="70" name="test_normalize_confusion_matrix[pd]" time="0.016"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="103" name="test_normalize_confusion_matrix_error" time="0.002"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="129" name="test_precision_recall_curve_return_type" time="0.002"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="139" name="test_precision_recall_curve" time="0.002"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="157" name="test_graph_precision_recall_curve[np]" time="0.026"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[float32-Binary Classification]" time="4.663"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="157" name="test_graph_precision_recall_curve[pd]" time="0.018"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="179" name="test_graph_precision_recall_curve_title_addition" time="0.017"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="190" name="test_roc_curve_binary[np]" time="0.002"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="190" name="test_roc_curve_binary[pd]" time="0.003"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="214" name="test_graph_roc_curve_binary[np]" time="0.021"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="214" name="test_graph_roc_curve_binary[pd]" time="0.022"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="237" name="test_graph_roc_curve_nans" time="0.042"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="251" name="test_graph_roc_curve_multiclass" time="0.026"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="272" name="test_graph_roc_curve_multiclass_custom_class_names" time="0.024"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="290" name="test_graph_roc_curve_title_addition" time="0.018"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="301" name="test_graph_confusion_matrix_default[np]" time="0.055"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="301" name="test_graph_confusion_matrix_default[pd]" time="0.026"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="329" name="test_graph_confusion_matrix_norm_disabled" time="0.026"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="353" name="test_graph_confusion_matrix_title_addition" time="0.021"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="364" name="test_get_permutation_importance_invalid_objective" time="0.057"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[object-Multiclass Classification]" time="4.573"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="371" name="test_get_permutation_importance_binary[np]" time="32.175"></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="85" name="test_installed_packages" time="0.013"></testcase><testcase classname="evalml.tests.utils_tests.test_cli_utils" file="evalml/tests/utils_tests/test_cli_utils.py" line="91" name="test_get_evalml_root" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="385" name="test_get_permutation_importance_multiclass" time="49.463"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="279" name="test_max_time_units" time="0.004"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="299" name="test_early_stopping" time="0.003"><system-out>

2 iterations without improvement. Stopping search early...
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="324" name="test_plot_disabled_missing_dependency" time="0.003"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="335" name="test_plot_iterations_max_pipelines" time="2.815"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.218
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.874
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean F1: 0.884

Search finished after 00:02            
Best pipeline: Extra Trees Classifier w/ Imputer
Best pipeline F1: 0.883586
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="353" name="test_plot_iterations_max_time" time="12.535"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Will stop searching for new pipelines after 10 seconds.

Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

Mode Baseline Binary Classification P... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.218
LightGBM Classifier w/ Imputer           Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.874
Extra Trees Classifier w/ Imputer        Elapsed: 00:01
	Starting cross validation
	Finished cross validation - mean F1: 0.884
Elastic Net Classifier w/ Imputer + S... Elapsed: 00:01
	Starting cross validation
	Finished cross validation - mean F1: 0.829
CatBoost Classifier w/ Imputer           Elapsed: 00:02
	Starting cross validation
	Finished cross validation - mean F1: 0.902
XGBoost Classifier w/ Imputer            Elapsed: 00:02
	Starting cross validation
	Finished cross validation - mean F1: 0.929
Random Forest Classifier w/ Imputer      Elapsed: 00:03
	Starting cross validation
	Finished cross validation - mean F1: 0.909
Logistic Regression Classifier w/ Imp... Elapsed: 00:05
	Starting cross validation
	Finished cross validation - mean F1: 0.803
XGBoost Classifier w/ Imputer            Elapsed: 00:08
	Starting cross validation
	Finished cross validation - mean F1: 0.218

Search finished after 00:12            
Best pipeline: XGBoost Classifier w/ Imputer
Best pipeline F1: 0.929256
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[int32-Binary Classification]" time="3.756"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[float32-Multiclass Classification]" time="4.546"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[category-Binary Classification]" time="4.443"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="142" name="test_normalize_values_exceptions" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="148" name="test_normalize_values[values0-answer0]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="148" name="test_normalize_values[values1-answer1]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="148" name="test_normalize_values[values2-answer2]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="148" name="test_normalize_values[values3-answer3]" time="0.004"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="148" name="test_normalize_values[values4-answer4]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="148" name="test_normalize_values[values5-answer5]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="27" name="test_explain_prediction_value_error[5]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="27" name="test_explain_prediction_value_error[test_features1]" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="27" name="test_explain_prediction_value_error[test_features2]" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_explainers" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_explainers.py" line="27" name="test_explain_prediction_value_error[test_features3]" time="0.001"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="405" name="test_get_permutation_importance_correlated_features" time="0.817"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="421" name="test_graph_permutation_importance" time="9.605"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="371" name="test_get_permutation_importance_binary[pd]" time="30.007"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[int32-Multiclass Classification]" time="6.500"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[float64-Binary Classification]" time="5.642"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[category-Multiclass Classification]" time="6.138"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[int64-Binary Classification]" time="3.622"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[float64-Multiclass Classification]" time="3.436"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="24" name="test_get_logger" time="0.004"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="37" name="test_logger_title" time="0.004"><system-out>*************
* Log title *
*************


Log subtitle
============
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="47" name="test_logger_info" time="0.003"><system-out>Test info
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="54" name="test_logger_warn" time="0.003"><system-out>Test warning
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="61" name="test_logger_error" time="0.002"><system-out>Test error
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="68" name="test_logger_critical" time="0.003"><system-out>Test critical
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="75" name="test_get_logger_default" time="0.007"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="93" name="test_get_logger_path_valid" time="0.008"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="117" name="test_get_logger_path_invalid" time="0.004"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="140" name="test_get_logger_path_valid_but_dir" time="0.005"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="162" name="test_get_logger_path_empty" time="0.003"></testcase><testcase classname="evalml.tests.utils_tests.test_logger" file="evalml/tests/utils_tests/test_logger.py" line="183" name="test_get_logger_exception" time="0.005"></testcase><testcase classname="evalml.tuners.grid_search_tuner" file="evalml/tuners/grid_search_tuner.py" line="9" name="evalml.tuners.grid_search_tuner.GridSearchTuner" time="0.006"></testcase><testcase classname="evalml.tuners.random_search_tuner" file="evalml/tuners/random_search_tuner.py" line="7" name="evalml.tuners.random_search_tuner.RandomSearchTuner" time="0.009"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="440" name="test_graph_permutation_importance_show_all_features" time="0.020"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="371" name="test_plot_iterations_ipython_mock" time="2.454"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.218
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.874
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean F1: 0.884

Search finished after 00:02            
Best pipeline: Extra Trees Classifier w/ Imputer
Best pipeline F1: 0.883586
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[int64-Multiclass Classification]" time="2.957"></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[bool-Binary Classification]" time="3.785"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="385" name="test_plot_iterations_ipython_mock_import_failure" time="2.757"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for F1. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.218
(2/3) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean F1: 0.874
(3/3) Extra Trees Classifier w/ Imputer        Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean F1: 0.884

Search finished after 00:02            
Best pipeline: Extra Trees Classifier w/ Imputer
Best pipeline F1: 0.883586
</system-out></testcase><testcase classname="evalml.tests.pipeline_tests.test_pipelines" file="evalml/tests/pipeline_tests/test_pipelines.py" line="991" name="test_targets_data_types_classification_pipelines[float16-Binary Classification]" time="2.426"></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="409" name="test_max_time" time="0.426"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Will stop searching for new pipelines after 0 seconds.

Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

Mode Baseline Binary Classification P... Elapsed: 00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 17.618

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 17.618402
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="417" name="test_automl_allowed_pipelines_no_allowed_pipelines[Binary Classification]" time="0.040"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="417" name="test_automl_allowed_pipelines_no_allowed_pipelines[Multiclass Classification]" time="0.041"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="428" name="test_automl_allowed_pipelines_specified_allowed_pipelines_binary" time="0.219"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="445" name="test_automl_allowed_pipelines_specified_allowed_pipelines_multi" time="0.252"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="462" name="test_automl_allowed_pipelines_specified_allowed_model_families_binary" time="0.573"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="489" name="test_automl_allowed_pipelines_specified_allowed_model_families_multi" time="0.641"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: random_forest

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) Random Forest Classifier w/ Imputer      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="516" name="test_automl_allowed_pipelines_init_allowed_both_not_specified_binary" time="0.562"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="532" name="test_automl_allowed_pipelines_init_allowed_both_not_specified_multi" time="0.531"><system-out>Using default limit of max_pipelines=5.

Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: lightgbm, linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) LightGBM Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Extra Trees Classifier w/ Imputer        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Elastic Net Classifier w/ Imputer + S... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) CatBoost Classifier w/ Imputer           Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="548" name="test_automl_allowed_pipelines_init_allowed_both_specified_binary" time="0.370"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(3/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(4/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(5/5) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="565" name="test_automl_allowed_pipelines_init_allowed_both_specified_multi" time="0.154"><system-out>Using default limit of max_pipelines=5.

*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Multiclass. 
Lower score is better.

Searching up to 5 pipelines. 
Allowed model families: none

(1/5) Mode Baseline Multiclass Classificati... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(2/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(3/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(4/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000
(5/5) Mock Multiclass Classification Pipeline  Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Multiclass: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Multiclass Classification Pipeline
Best pipeline Log Loss Multiclass: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_classification" file="evalml/tests/automl_tests/test_automl_search_classification.py" line="582" name="test_automl_allowed_pipelines_search" time="0.135"><system-out>*****************************
* Beginning pipeline search *
*****************************

Optimizing for Log Loss Binary. 
Lower score is better.

Searching up to 2 pipelines. 
Allowed model families: none

(1/2) Mode Baseline Binary Classification P... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000
(2/2) Mock Binary Classification Pipeline      Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean Log Loss Binary: 1.000

Search finished after 00:00            
Best pipeline: Mode Baseline Binary Classification Pipeline
Best pipeline Log Loss Binary: 1.000000
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="16" name="test_init" time="2.634"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/3) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
(3/3) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838

Search finished after 00:01            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 3 pipelines. 
Allowed model families: linear_model, xgboost, random_forest, catboost, extra_trees

(1/3) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/3) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
(3/3) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838

Search finished after 00:01            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="36" name="test_random_state" time="4.225"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/5) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
(3/5) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838
(4/5) CatBoost Regressor w/ Imputer            Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean R2: 0.137
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean R2: 0.844

Search finished after 00:01            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.015
(2/5) Extra Trees Regressor w/ Imputer         Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.910
(3/5) XGBoost Regressor w/ Imputer             Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.838
(4/5) CatBoost Regressor w/ Imputer            Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean R2: 0.137
(5/5) Random Forest Regressor w/ Imputer       Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean R2: 0.844

Search finished after 00:01            
Best pipeline: Extra Trees Regressor w/ Imputer
Best pipeline R2: 0.909807
</system-out></testcase><testcase classname="evalml.tests.automl_tests.test_automl_search_regression" file="evalml/tests/automl_tests/test_automl_search_regression.py" line="48" name="test_categorical_regression" time="2.382"><system-out>Generating pipelines to search over...
*****************************
* Beginning pipeline search *
*****************************

Optimizing for R2. 
Greater score is better.

Searching up to 5 pipelines. 
Allowed model families: linear_model, xgboost, random_forest, catboost, extra_trees

(1/5) Mean Baseline Regression Pipeline        Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: -0.009
(2/5) Extra Trees Regressor w/ Imputer + On... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.326
(3/5) XGBoost Regressor w/ Imputer + One Ho... Elapsed:00:00
	Starting cross validation
	Finished cross validation - mean R2: 0.174
(4/5) CatBoost Regressor w/ Imputer            Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean R2: 0.129
(5/5) Random Forest Regressor w/ Imputer + ... Elapsed:00:01
	Starting cross validation
	Finished cross validation - mean R2: 0.354

Search finished after 00:02            
Best pipeline: Random Forest Regressor w/ Imputer + One Hot Encoder
Best pipeline R2: 0.353969
</system-out></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="371" name="test_get_permutation_importance_binary[pd]" time="19.938"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="385" name="test_get_permutation_importance_multiclass" time="34.856"></testcase><testcase classname="evalml.tests.utils_tests.test_graph_utils" file="evalml/tests/utils_tests/test_graph_utils.py" line="395" name="test_get_permutation_importance_regression" time="17.723"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="395" name="test_get_permutation_importance_regression" time="17.182"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="405" name="test_get_permutation_importance_correlated_features" time="0.481"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="421" name="test_graph_permutation_importance" time="4.662"></testcase><testcase classname="evalml.tests.model_understanding_tests.test_graphs" file="evalml/tests/model_understanding_tests/test_graphs.py" line="440" name="test_graph_permutation_importance_show_all_features" time="0.010"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[MeanBaselineRegressionPipeline-ValueError-You passed in a baseline pipeline. These are simple enough that SHAP values are not needed.]" time="0.010"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[ModeBaselineBinaryPipeline-ValueError-You passed in a baseline pipeline. These are simple enough that SHAP values are not needed.]" time="0.008"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[ModeBaselineMulticlassPipeline-ValueError-You passed in a baseline pipeline. These are simple enough that SHAP values are not needed.]" time="0.008"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[Pipeline-NotImplementedError-SHAP values cannot currently be computed for catboost models for multiclass problems.]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[Pipeline-NotImplementedError-SHAP values cannot currently be computed for xgboost models.0]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[Pipeline-NotImplementedError-SHAP values cannot currently be computed for xgboost models.1]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[Pipeline-NotImplementedError-SHAP values cannot currently be computed for xgboost models.2]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[Pipeline-ValueError-^Unknown shap_values datatype]" time="0.004"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="54" name="test_value_errors_raised[Pipeline-ValueError-You must pass in a value for parameter &apos;training_data&apos; when the pipeline does not have a tree-based estimator. Current estimator model family is Linear.]" time="0.002"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="75" name="test_create_dictionary_exception" time="0.001"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesRegressor-Regression-1]" time="0.135"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesRegressor-Regression-5]" time="0.138"></testcase><testcase classname="evalml.tests.model_understanding_tests.prediction_explanations_tests.test_algorithms" file="evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py" line="98" name="test_shap[ExtraTreesRegressor-Binary Classification-1]" time="0.003"><skipped message="Skipping because estimator and pipeline are not compatible." type="pytest.skip">/Users/bryan.chen/Documents/featurelabs/evalml/evalml/tests/model_understanding_tests/prediction_explanations_tests/test_algorithms.py:104: Skipping because estimator and pipeline are not compatible.</skipped></testcase></testsuite>